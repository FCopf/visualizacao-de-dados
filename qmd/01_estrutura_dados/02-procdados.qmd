# Processamento de dados {#sec-procdados}

:::{.callout-tip collapse="true"}
## Pacotes e funções utilizadas no capítulo

```{r}
library(tidyverse)
library(flextable)
```
:::

Tabelas de dados como a apresentada no @sec-estrdados são normalmente armazenadas em planilhas eletrônicas. Os formatos mais comuns para armazenamento são arquivos do tipo `.xlsx`, `.csv`, `.txt` ou planilhas na nuvem (ex. google sheets). Os programas para visualização e destes tipos de arquivos são apropriados para inserção e armazenamendo de dados, mas apresentam limitações para o processamento, descrição e visualização.

Neste capítulo iremos utilizar a linguagem estatística [R](https://www.r-project.org/) e o ambiente de trabalho [RStudio](https://rstudio.com/) para iniciar um projeto de descrição e visualização de dados. Veremos como preparar um novo projeto na linguagem R, organizar as bases de dados em um diretório de trabalho, importá-las para o ambiente R e aplicar algumas ações comuns de processamento. O objetivo é que a base de dados original permaneça inalterada no diretório de trabalho e que todo o processamento seja feito em uma *versão da base de dados* que será importada para o ambiente R. Isto evita que sejam feitas alterações equivocadas diretamente na base de dados, resultando na perda da informação original.


:::{.callout-note}

## Introdução ao R

Para mais detalhes sobre programação e processamento de dados em R veja: [Introdução ao Ambiente R de Programação](https://fcopf.github.io/probest-introR/).

:::

## Iniciando o projeto `Intro_estatistica`

1. Abra o RStudio e selecione `File --> New Project...`. Na janela que se abrir, selecione `New Directory --> New Project`. Dê um nome ao novo projeto de `Intro_estatistica` e crie-o na pasta na pasta *Documentos*. Isto irá gerar uma pasta com o nome escolhido, e dentro dela o arquivo `Intro_estatistica.Rproj`. A partir de agora iremos abrir a seção de trabalho clicando sobre o arquivo `Intro_estatistica.Rproj`, garantindo que o R estará direcionado à nossa pasta de trabalho onde poderemos inserir todas as bases de dados utilizadas no projeto, bem como os arquivos gerados durante as análises como novas planilhas, gráficos, figuras, slides, arquivos `.pdf`, etc..

2. Verifique se o R está realmente direcionado ao diretório de trabalho correto com o comando abaixo.

```{r}
#| echo: true
#| eval: false

getwd()
```

```{r}
#| echo: false
#| eval: true
cat('[1] "C:/Users/f_cop/Documents/Intro_estatistica"')
```

Como resultado, você deverá obter uma saída similar à apresentada acima, contendo o caminho do projeto **em seu computador**.

2. Copie para dentro do diretório a base de dados `Reservatorios_Parana_parcial.csv` disponível no link do [GitHub](https://github.com/FCopf/visualizacao-de-dados/blob/main/datasets/Reservatorios_Parana_parcial.csv). Após acessar o link, a janela de seu navegador irá mostrar um arquivo texto com os dados da planilha. Clique sobre o botão `Raw` na tela do GitHub e com o botão direito do mouse selecione os dados, salvando-os como arquivo `.csv` no diretório de trabalho recém criado. Esta base de dados é a mesma apresentada no @sec-estrdados.

3. No R studio crie um novo Script em: `File --> New File --> RScript`. Antes de qualquer ação, salve o novo arquivo como `aula_01.R`. A partir de agora, todos os comandos desta aula deverão ser digitados dentro deste arquivo. Para rodar cada comando, pressione o botão Run no RStudio ou digite as teclas de atalho `Ctrl + Enter`. Não se esqueça de salvar o arquivo texto à medida que adiciona novos comandos.

4. Para verificar se o R está lendo corretamente os arquivos recém criados em seu diretório, digite o comando `dir()` no console do RStudio:

```{r}
#| echo: true
#| eval: false
dir()
```

```{r}
#| echo: false
#| eval: true
cat('[1] "aula_01.R"', '\n', '[2] "Intro_estatistica.Rproj"', '\n', '[3] "Reservatorios_Parana_parcial.csv"')
```

Se tudo estiver correto, o resultado deste comando deve listar os arquivos presentes em sua pasta de trabalho recém criada: `aula_01.R`, `Intro_estatistica.Rproj` e `Reservatorios_Parana_parcial.csv`.

## Instalação de pacotes

O R possui vários pacotes (ou bibliotecas) pré-instalados, porém é comum que tenhamos que utilizar alguns que não venham na instalação padrão. Neste projeto utilizaremos o pacote `tidyverse`. Para instalar o pacote, digite o seguinte comando no Console do RStudio:

```{r}
#| echo: true
#| eval: false
install.packages("tidyverse")
```

Para mais detalhes sobre o pacote, acesse a [apostila do R](https://fcopf.github.io/probest-introR/tidy.html){target="_blank"} e veja o [site oficial](https://www.tidyverse.org/){target="_blank"}.

Um pacote necessita ser instalado **somente uma vez** em seu computador. Feito isto ele estará sempre disponível, bastando carregá-lo a cada vez que você abrir uma seção do R.

## Carregando os pacotes

Antes de iniciar as análises, insira este comando em seu arquivo texto:

```{r}
#| echo: true
#| eval: false
library(tidyverse)
```

Ao rodar este comando você habilita as funções do pacote para serem utilizados em sua seção do R. Sempre que você iniciar uma nova seção do R você deverá carregar os pacotes necessários com o comando `library()`.

## Importanto a base de dados

A base de dados está disponível em nosso diretório, porém ainda não a importamos para o ambiente R. Para isto, utilize o comando `read_delim()`:

```{r}
#| echo: false
#| eval: true
res = read_delim('datasets/Reservatorios_Parana_parcial.csv',
                  delim = ',',
                  locale = locale(decimal_mark = '.',
                                  encoding = 'latin1'))
```

```{r}
#| echo: true
#| eval: false
res = read_delim('Reservatorios_Parana_parcial.csv',
                  delim = ',',
                  locale = locale(decimal_mark = '.',
                                  encoding = 'latin1'))
```

O comando acima importa para o R os dados da tabela denominada `Reservatorios_Parana_parcial.csv` e cria um objeto denominado `res` contendo as informações dos arquivo. A partir de agora, qualquer modificação que fizermos no objeto `res`, não irá alterar o arquivo `.csv` original.

Vamos entender alguns argumentos do comando `read_delim()`:

+ `delim = ','`: utilizado para dizer ao R que cada coluna na base de dados está separada das demais por uma vírgula. Se no arquivo `.csv` as colunas estivessem separadas por *ponto-e-vígula*, deveríamos escrever `delim = ';'`.

+ `decimal_mark = '.'`: informa que o símbolo *ponto* é utilizado como um separador decimal. Se no arquivo `.csv` os números decimais utilizassem a vírgula, o argumento deveria ser `decimal_mark = ','`.

+ `encoding = 'latin1'`: indica a forma de codificação. A necessidade deste argumento depende do sistema operacional de seu computador. Outras formas de codificação além de são `UTF-8`, `ISO-8859-1`,além de outras. Geralmente, o argumento é necessário quando existem caracteres especiais na base de dados como acentos e cedilhas. Como recomendação, é interessante evitar o uso destes tipos de caracteres *sempre que possível*.

Podemos visualizar a base de dados no RStudio digitando:

```{r}
res
```

Fazendo isso você verá somente parte da base de dados no console, a depender do tamanho de sua janela do RStudio. Caso queira ver a tabela completa em uma aba separada do RStudio digite:

```{r}
#| echo: true
#| eval: false
View(res)
```



## Verificando a estrutura da base de dados

A base de dados é simplesmente uma **tabela**, em que cada linha representa uma observação e cada coluna uma variável a semelhança do que discutímos no @sec-estrdados. Vamos realizar algumas operações para entender como explorar as informações contidas na tabela.

O comando abaixo informa alguns detalhes sobre cada coluna da tabela e dos tipos de dados:

```{r}
glimpse(res)
```

Existem dois tipos de dados: `chr` identificando que a coluna contém uma variável **qualitativa** e `dbl`, identificando que a coluna contém uma variável **quantitativa**.

## Reordenando as linhas da base de dados

A tabela contém uma coluna denominada `Fechamento`, que mostra o ano em que o reservatório foi formado. Vamos visualizar em ordem crescente do ano de formação, do mais antigo para o mais novo:

```{r}
res %>% 
  arrange(Fechamento)
```

O reservatório mais antigo é de `r min(res$Fechamento, na.rm = T)` e o mais novo de `r max(res$Fechamento, na.rm = T)`. Três reservatórios estão ao final da tabela pois não há informações sobre o ano de `Fechamento` e suas céluas constam como `NA`.

:::{.callout-note}

Ao rodar esta função não alteramos o objeto `res`, apenas o visualizamos em uma ordem diferente. Digite novamente o nome do objeto e verá que a ordem permanece inalterada. 

```{r}
#| echo: true
#| eval: false
res
```

:::

Se desejarmos visualizar a tabela em ordem **decresente**, basta fazermos:

```{r}
#| echo: true
#| eval: false
res %>% 
  arrange(desc(Fechamento))
```

Se utilizarmos as função `arrange()` com uma variável **nominal**, a tabela será organizada em ordem alfabética para esta variável.

```{r}
#| echo: true
#| eval: false
res %>% 
  arrange(Bacia)
```

## Selecionando colunas da tabela

É interessante, sobretudo para grandes bases de dados, se pudermos selecionar sub-grupos de colunas, excluindo outras que não nos interessam. Podemos fazer isto facilmente utilizando a função `select()`.

Por exemplo, para selecionar somente as colunas `Reservatório`, `Area` e `Riqueza`:

```{r}
res_new = res %>% 
  select(Reservatorio, Area, Riqueza)

res_new %>% 
  flextable() %>%
  fit_to_width(max_width = 8)
```

O que fizemos nos comandos acima foi cirar um **novo** objeto (`res_new`), contendo somente as colunas selecionadas.

Se quisermos selecionar todas as variáveis **exceto** `Reservatório` fazemos:

```{r}
rew_new = res %>% 
  select(-Reservatorio)

rew_new %>% 
  flextable() %>%
  fit_to_width(max_width = 8)
```

Podemos fazer também uma seleção que vá desde uma coluna inicial até uma coluna final. Podemos selecionar, por exemplo, todas as colunas desde `pH` **até** `P.total`. Para isto fazemos:

```{r}
res_new = res %>% 
  select(pH:P.total)

res_new %>% 
  flextable() %>%
  fit_to_width(max_width = 8)
```

Podemos ainda selecionar todas as variáveis categóricas:

```{r}
rew_new = res %>% 
  select_if(is.character)

rew_new %>% 
  flextable() %>%
  fit_to_width(max_width = 8)
```

Ou todas as variáveis numéricas:

```{r}
rew_new = res %>% 
  select_if(is.numeric)

rew_new %>% 
  flextable() %>%
  fit_to_width(max_width = 8)
```

Finalmente, podemos alterar a ordem das colunas conforme desejarmos:

```{r}
nova_ordem = c('Fechamento', 'Area', 
                'Bacia', 'Reservatorio', 'CPUE', 
                'Riqueza', 'Trofia', 'Condutividade', 
                'pH', 'P.total', 'Alcalinidade')
res_new = res %>% 
  select(nova_ordem)

res_new %>% 
  flextable() %>%
  fit_to_width(max_width = 8)
```

## Filtrando linhas na tabela

Podemos fazer algo similar com as linhas utilizando a função `filter()`. P
Por exemplo, se quisermos selecionar somente os reservatórios da bacia do rio Paranapanema podemos fazer:

```{r}
res_paranapanema = res %>% 
  filter(Bacia == 'Paranapanema')

res_paranapanema %>% 
  flextable() %>%
  fit_to_width(max_width = 8)
```

Ou todos os reservatório **exceto** os da bacia do rio Paranapanema.

```{r}
res_outros = res %>% 
  filter(Bacia != 'Paranapanema')

res_outros %>% 
  flextable() %>%
  fit_to_width(max_width = 8)
```

:::{.callout-note}

## Operadores lógicos

A função `filter()` utiliza operadores lógicos (retornam VERDADEIRO ou FALSO). Para aprender sobre este operadores no R veja [Operadores lógicos](https://fcopf.github.io/probest-introR/intro.html#operadores-l%C3%B3gicos){target="_blank"}

:::

Podemos realizar operações análogas para variáveis numéricas. Vamos selecionar somente os reservatórios com pH **menor** que $7.0$.

```{r}
res_acidos = res %>% 
  filter(pH < 7)

res_acidos %>% 
  flextable() %>%
  fit_to_width(max_width = 8)
```

Se quisermos pH's **menores ou iguais** a $7.0$ fazemos:

```{r}
res_acidos = res %>% 
  filter(pH <= 7)

res_acidos %>% 
  flextable() %>%
  fit_to_width(max_width = 8)
```

## Adicionando ou modificando colunas

Podemos adicionar novas colunas, assim como fazemos em uma planilha excel. Temos por exemplo, o ano de formação do reservatório. Assumindo que estes dados são do ano de $2005$, podemos criar uma coluna indicando a idade do reservatório no momento da tomada de dados. Para criar uma nova coluna usamos a função `mutate()`.

```{r}
res_new = res %>% 
  mutate(Idade = 2005 - Fechamento)

res %>% 
  flextable() %>%
  fit_to_width(max_width = 8)
```

Note que **re-escrevemos** o objeto `res` adicionando uma nova coluna denominada  `Idade` calculada a partir da expressão `Idade = 2005 - Fechamento`. A partir de agora portanto, o objeto `res` tem uma coluna adicional. 

> *Lembre-se entretanto que esta alteração foi feita dentro do ambiente do projeto. A base de dados original `.csv` permanece inalterada*.

Podemos também fazer alterações em uma coluna existente usando a mesma função `mutate`. Por exemplo, a variável `Area` é dada em $km^2$. Podemos transformá-la em **Hectares** multiplicando os valores por $100$.

```{r}
res = res %>% 
  mutate(Area = Area * 100)

res %>% 
  flextable() %>%
  fit_to_width(max_width = 8)
```


## Renomeando colunas

Finalmente, podemos renomear colunas para facilitar a leitura dos dados. A coluna `P.total`, por exemplo, indica a quantidade de fósforo total, enquanto a variável `CPUE` é a captura em kg. Podemos renomear estas colunas usando a função `rename`:

```{r}
res = res %>% 
  rename(Fosforo_total = P.total,
         Captura_kg = CPUE)

res %>% 
  flextable() %>%
  fit_to_width(max_width = 8)
```

## Outras operações para processamento e transformação de dados

Existem muitas outras operações possíveis para processar conjuntos de dados. O conjunto de pacotes `tidyverse` (veja [aqui](https://fcopf.github.io/probest-introR/format.html){target="_blank"}) possui um grande número de funções para esta finalidade que operam de modo coerente.

Neste capítulo vimos funções para:

+ Importar arquivos `.csv`: `read_delim`;

+ Verificar os tipos de dados de uma tabela: `glimpse`;

+ Reorganizar informações: `arrange`;

+ Selecionar colunas: `select`;

+ Filtrar linhas: `filter`;

+ Adicionar/modificar colunas: `mutate`;

+ Renomear colunas: `rename`.

A partir dos próximos capítulos iremos nos dedicar a aspectos da estatística descritiva, apresentando novas funções à medida que forem necessárias. Caso deseje explorar outras funções para processamento e transformação de dados acesse o capítulo [Manipulação e formatação de dados](https://fcopf.github.io/probest-introR/format.html){target="_blank"}.
