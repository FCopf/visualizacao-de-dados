[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Descrição e Visualização de Dados",
    "section": "",
    "text": "Nota\n\n\n\nFormatação e apresentação de tabelas\nAo apresentar data.frames como resultados das análises de dados, utilizaremos o pacote flextable para fins de apresentação gráfica. Caso deseje rodar os códigos no RStudio, remova as funções flextable() e outras funções associadas (ex.: fit_to_width(max_width = 8))."
  },
  {
    "objectID": "qmd/01_estrutura_dados/01-estrdados.html",
    "href": "qmd/01_estrutura_dados/01-estrdados.html",
    "title": "1  Estrutura e tipo de dados",
    "section": "",
    "text": "Pacotes e funções utilizadas no capítulo\n\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(flextable)\nUtilizamos métodos de estatística descritiva para evidenciar informações relevantes de um conjunto de dados. Em grande parte, a apresentação destas informações passa pela construção de tabelas, gráficos e pelo cálculo de descritores que resumem algumas características das variáveis envolvidas (ex. média aritmética, desvio padrão, frequência relativa, padrões de associação). Neste capítulo iremos tratar a estrutura de um conjunto de dados e dos tipos de variáveis mais comuns."
  },
  {
    "objectID": "qmd/01_estrutura_dados/01-estrdados.html#um-exemplo",
    "href": "qmd/01_estrutura_dados/01-estrdados.html#um-exemplo",
    "title": "1  Estrutura e tipo de dados",
    "section": "1.1 Um exemplo",
    "text": "1.1 Um exemplo\nConsidere a tabela abaixo, construída a partir do livro de Biocenoses em Reservatórios: padrões espaciais e temporais (Rodrigues et al. 2005).\n\n\n\n\nres = read_delim('Reservatorios_Parana_parcial.csv',\n                  delim = ',',\n                  locale = locale(decimal_mark = '.',\n                                  encoding = 'latin1'))\n\n\nres %>%\n  flextable() %>% \n  fit_to_width(max_width = 8)\n\n\n\nTabela 1.1:  Variáveis ambientais e captura de peixes em reserrvatórios da bacia do rio Paraná. \nReservatorioBaciaFechamentoAreaTrofiapHCondutividadeAlcalinidadeP.totalRiquezaCPUECavernosoIguacu1,9652.90Oligotrófico7.433.1139.807.8189.22CurucacaIguacu1,9822.00Oligotrófico7.032.4125.704.71628.73Foz do AreiaIguacu1,980139.00Oligotrófico7.335.597.0014.31911.59IraiIguacu2,00015.00Eutrófico6.950.23.3053.41230.76JMFIguacu1,9700.45Mesotrófico7.340.23.7041.2185.95JordaoIguacu1,9963.40Oligotrófico7.123.7152.703.3177.75PassaunaIguacu1,97814.00Oligotrófico8.8125.6526.0015.2117.51PiraquaraIguacu1,9793.30Oligotrófico7.122.850.674.584.01Salto CaxiasIguacu1,998124.00Oligotrófico7.339.6106.0012.12120.83Salto do VauIguacu1,9592.90Oligotrófico6.523.2279.0011.082.43Salto OsorioIguacu1,97551.00Oligotrófico8.638.9233.303.42412.55Salto SantiagoIguacu1,979208.00Oligotrófico9.239.5117.6013.12111.73SegredoIguacu1,99282.50Oligotrófico7.034.5165.206.42213.72MouraoIvai1,96411.30Oligotrófico8.123.356.557.11516.50PatosIvai1.30Mesotrófico6.946.0180.1039.2104.71GuaricanaLitoranea1,9577.00Oligotrófico7.427.983.7212.4127.95Parigot SouzaLitoranea1,97012.00Oligotrófico7.763.6259.2016.91213.12Salto do MeioLitoranea0.10Oligotrófico6.937.4147.1017.11116.10VossorocaLitoranea1,9495.10Mesotrófico7.339.8156.0021.91411.74Canoas IParanapanema1,99930.85Oligotrófico7.463.3234.909.93517.95Canoas IIParanapanema1,99222.50Oligotrófico7.861.29.04013.86CapivaraParanapanema1,975419.30Oligotrófico7.558.6196.005.53413.04ChavantesParanapanema1,970400.00Oligotrófico7.657.8211.807.8237.35RosanaParanapanema1,986220.007.758.2202.403020.92Salto GrandeParanapanema1,95812.00Oligotrófico7.162.3230.1010.32413.67TaquarucuParanapanema1,98980.10Oligotrófico7.957.0191.804.53321.82MelissaPiriqui1,9620.10Eutrófico6.834.068.3766.9126.29Santa MariaPiriqui0.07Oligotrófico6.841.7480.1014.979.40AlagadosTibagi1,9097.20Oligotrófico7.641.7172.2019.975.60ApucaraninhaTibagi1,958102.05HarmoniaTibagiOligotrófico8.331.0113.308.6724.88\n\n\n\n\n\n\nA tabela Tabela 1.1 é formada por 31 linhas referentes a reservatórios do estado do Paraná e 11 colunas em que constam informações sobre cada reservatório, sendo elas:\nReservatorio: nome do reservatório;\nBacia: bacia hidrográfica (Iguacu, Ivai, Litoranea, Paranapanema, Piriqui, Tibagi);\nFechamento: ano de formação do reservatório;\nArea: área em \\(km^2\\);\nTrofia: grau de trofia (Eutrófico, Mesotrófico, Oligotrófico);\npH: pH;\nCondutividade: condutividade;\nAlcalinidade: alcalinidade;\nP.total: fósforo total;\nRiqueza: número de espécies de peixes encontradas;\nCPUE: captura (kg) por unidade de esforço;"
  },
  {
    "objectID": "qmd/01_estrutura_dados/01-estrdados.html#unidades-amostrais-e-descritores",
    "href": "qmd/01_estrutura_dados/01-estrdados.html#unidades-amostrais-e-descritores",
    "title": "1  Estrutura e tipo de dados",
    "section": "1.2 Unidades amostrais e descritores",
    "text": "1.2 Unidades amostrais e descritores\nEsta tabela está organizada no formato em que cada linha representa uma unidade amostral (UA) e cada coluna representa uma variável (VA) que descreve determinada característica desta observação. Ao longo dos próximos capítulos veremos diversos conjuntos de dados organizados neste formato.\n\n\n\n\nTabela 1.2:  Estrutura de uma base de dados em que as colunas representam as variáveis (ou atributos) e as linhas representam as unidades amostrais (ou observações) \nIDVA 1VA 2VA 3VA 4VA 5VA 6VA 7UA 1  UA 2  UA 3  UA 4  UA 5  UA 6  UA 7  UA 8  UA 9  UA 10  \n\n\n\n\n\n\nNo exemplo apresentado na Tabela 1.1 segue a esrutura descrita acima (Tabela 1.2), em que cada unidade amostral (linhas da tabela) é um reservatório descrito por variáveis (ou atributos) dispostas nas colunas da tabela. O reservatório de Cavernoso por exemplo faz parte da bacia do Iguacu, foi formado no ano de 1965, tem área de 2.9 \\(km^2\\), pH igual a 7.4 e assim por diante.\n\n\n\n\n\n\nValores faltantes\n\n\n\nAlgumas células da tabela estão preenchidas por NA. Isto significa que a informação naquela célula não foi mensurada e que temos um dado faltante. Você deve ter muito cuidado ao lidar com este tipo de situação. Se uma linha contém muitas células sem informação, é prudente excluir esta observação das análises. Se por outro lado, uma coluna apresenta muitos valores faltantes, talvez seja prudente excluir a variável das análises. Se você não deseja ou não pode excluir a linha ou a coluna existem métodos de preenchimento de dados faltantes. No entanto, ao optar por algum destes métodos, você deve ter ter claro quais serão os efeitos de inserir uma informação à tabela de dados que efetivamente não foi mensurada."
  },
  {
    "objectID": "qmd/01_estrutura_dados/01-estrdados.html#tipos-de-dados",
    "href": "qmd/01_estrutura_dados/01-estrdados.html#tipos-de-dados",
    "title": "1  Estrutura e tipo de dados",
    "section": "1.3 Tipos de dados",
    "text": "1.3 Tipos de dados\nUma tabela de dados pode ser composta por variáveis quantitativas ou qualitativas.\n\nVariáveis qualitativas\nSão variáveis não-numéricas como categorias ou rótulos. Dentre as variáveis qualitativas temos aquelas do tipo categóricas não-ordenadas e do tipo categóricas ordenadas.\nVariável categórica não-ordenada: a variável Bacia classifica um reservatório como pertencente a uma determinada bacia hidrográfica. Os níveis da variável Bacia são: Iguacu, Ivai, Litoranea, Paranapanema, Piriqui, Tibagi. A variável é do tipo categórica não-ordenada, pois os níveis não possuem qualquer relação de ordenação natural entre si.\n\n\nVariáveis quantitativas\nSão variáveis numéricas que também podem ser sub-divididas em dois grupos: discretas e contínuas.\n\nVariáveis quantitativas discretas: envolvem quantias enumeráveis como a contagem de barcos que saem para pescar em um determinado dia, o número de peixes de um cardume. Em nosso exemplo, a variável Riqueza é quantitativa discreta pois expressa o número de espécies de peixes encontradas em cada reservatório. Este é um número inteiro que pode assumir valor mínimo igual a 0 (nenhuma espécie) e em teoria, não tem limite superior (ainda que neste exemplo, o número máximo encontrados seja de 40 espécies).\nVariáveis quantitativas contínuas: envolvem quantias não-enumeráveis como a vazão em \\(m^3/seg\\) que verte de uma cachoeira, o volume de chuva em um determinado dia, altura da maré ou a velocidade do vento. O limite de precisão que utilizamos para representá-las depende basicamente da capacidade de mensuração dos aparelhos disponíveis. Em nosso exemplo, temos diversas variáveis deste tipo como pH, Condutividade, Fosforo_total.\n\n\n\n\n\n\n\nTransformando variáveis\n\n\n\nSempre é possível transformar variáveis quantitativas em qualitativas. Se temos uma variável medindo o comprimento de peixes desembarcados em centímetros (variável quantitativa), é possível expressá-la de forma categórica em peixes grandes e peixes pequenos (variável qualitativa). Por outro lado, se tivermos somente a informação de que um peixe é grande ou pequeno, não podemos recuperar as quantias numéricas originais. Ao transformar uma variável de quantitativa em qualitativa, algumas propriedades são perdidas."
  },
  {
    "objectID": "qmd/01_estrutura_dados/01-estrdados.html#níveis-de-mensuração",
    "href": "qmd/01_estrutura_dados/01-estrdados.html#níveis-de-mensuração",
    "title": "1  Estrutura e tipo de dados",
    "section": "1.4 Níveis de mensuração",
    "text": "1.4 Níveis de mensuração\nPodemos organizar uma variável a partir de seu nível de mensuração (Figura 1.1), dado em: nominal, ordinal, intervalar e razão.\nNível nominal: é característico de variáveis que possuem níveis não ordenaveis. Ex. cor, grupo taxonômico, nomes de cidades, etc.\n\nNível ordinal: é aquele em que os níveis podem ser ordenados, embora não seja possível quantificar as diferenças entre dois níveis. Ex. i - Ordem de chegada de maratonistas em uma competição (\\(1^o\\),\\(2^o\\),\\(3^o\\),\\(\\cdots\\)). ii - Condição de saneamento das cidades (ótimo, bom, ruim, péssimo). iii - Condição de saneamento das praias da baixada santista (próprio, imprórpio). No nível ordinal podemos ordenar os elementos porém não podemos quantificar as diferenças entre eles.\nNível intervalar: é aquele em que além ser possível ordenar, é possível quantificar as diferenças entre duas observações. No entanto, não há um ponto inicial natural, ou seja, um ponto zero que indique ausência da quantia. Ex. i – Temperatura: \\(0^oC\\) não indica ausência de temperatura, assim como \\(10^oC\\) não é duas vezes mais quente que \\(5^oC\\). Essas características são somente uma convenção relacionada à escala de mensuração da temperatura. ii - Ano do calendário: o ano zero é uma convenção do calendário, não significa ausência de tempo.\nNível de razão: é como o intervalar, porém existe um ponto zero natural. Peso igual a \\(0\\) kg indica ausência de peso e dez quilogramas é duas vezes mais pesado que \\(5\\) kg. O mesmo vale para comprimento, distância, velocidade, número de ovos.\n\n\n\n\n\nFigura 1.1: Tipos de variáveis e níveis de mensuração.\n\n\n\nA depender do nível de mensuração, algumas operações matemáticas podem ou não fazer sentido. Por exemplo, se uma espécie tem \\(N_A = 100\\) indivíduos na região A e \\(N_B = 200\\) na região B, a segunda região é duas vezes mais populosa pois \\(\\frac{N_B}{N_A} = 2\\). Por outro lado, se a temperatura na região A é de \\(T_A = 10^oC\\) enquanto na B é de \\(T_B = 20^oC\\) não faz sentido fazer \\(\\frac{T_B}{T_A} = 2\\) e dizer que B seja duas vezes mais quente que A. Ainda que matematicamente a operação seja possível nos dois exemplos, no último sua interpretação física não tem sentido.\n\n\n\n\n\n\nTipos de dados vs níveis de mensuração\n\n\n\nExiste uma relação entre tipo de dados e nível de mensuração. Os níveis nominal e ordinal de mensuração se referem a variáveis qualitativas não-ordenadas e qualitativas ordenadas respectivamente. Já os níveis intervalar e razão se referem a variáveis quantitativas, podendo ser discretas ou contínuas.\n\n\n\n\n\n\nRodrigues, Liliana, Sidinei Magela Thomaz, Angelo Antonio Agostinho, and Luiz Carlos Gomes. 2005. Biocenoses Em Reservatórios: Padrões Espaciais e Temporais. Rima."
  },
  {
    "objectID": "qmd/01_estrutura_dados/02-procdados.html",
    "href": "qmd/01_estrutura_dados/02-procdados.html",
    "title": "2  Processamento de dados",
    "section": "",
    "text": "Pacotes e funções utilizadas no capítulo\n\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(flextable)\nTabelas de dados como a apresentada no Capítulo 1 são normalmente armazenadas em planilhas eletrônicas. Os formatos mais comuns para armazenamento são arquivos do tipo .xlsx, .csv, .txt ou planilhas na nuvem (ex. google sheets). Os programas para visualização e destes tipos de arquivos são apropriados para inserção e armazenamendo de dados, mas apresentam limitações para o processamento, descrição e visualização.\nNeste capítulo iremos utilizar a linguagem estatística R e o ambiente de trabalho RStudio para iniciar um projeto de descrição e visualização de dados. Veremos como preparar um novo projeto na linguagem R, organizar as bases de dados em um diretório de trabalho, importá-las para o ambiente R e aplicar algumas ações comuns de processamento. O objetivo é que a base de dados original permaneça inalterada no diretório de trabalho e que todo o processamento seja feito em uma versão da base de dados que será importada para o ambiente R. Isto evita que sejam feitas alterações equivocadas diretamente na base de dados, resultando na perda da informação original."
  },
  {
    "objectID": "qmd/01_estrutura_dados/02-procdados.html#iniciando-o-projeto-intro_estatistica",
    "href": "qmd/01_estrutura_dados/02-procdados.html#iniciando-o-projeto-intro_estatistica",
    "title": "2  Processamento de dados",
    "section": "2.1 Iniciando o projeto Intro_estatistica",
    "text": "2.1 Iniciando o projeto Intro_estatistica\n\nAbra o RStudio e selecione File --> New Project.... Na janela que se abrir, selecione New Directory --> New Project. Dê um nome ao novo projeto de Intro_estatistica e crie-o na pasta na pasta Documentos. Isto irá gerar uma pasta com o nome escolhido, e dentro dela o arquivo Intro_estatistica.Rproj. A partir de agora iremos abrir a seção de trabalho clicando sobre o arquivo Intro_estatistica.Rproj, garantindo que o R estará direcionado à nossa pasta de trabalho onde poderemos inserir todas as bases de dados utilizadas no projeto, bem como os arquivos gerados durante as análises como novas planilhas, gráficos, figuras, slides, arquivos .pdf, etc..\nVerifique se o R está realmente direcionado ao diretório de trabalho correto com o comando abaixo.\n\n\ngetwd()\n\n\n\n[1] \"C:/Users/f_cop/Documents/Intro_estatistica\"\n\n\nComo resultado, você deverá obter uma saída similar à apresentada acima, contendo o caminho do projeto em seu computador.\n\nCopie para dentro do diretório a base de dados Reservatorios_Parana_parcial.csv disponível no link do GitHub. Após acessar o link, a janela de seu navegador irá mostrar um arquivo texto com os dados da planilha. Clique sobre o botão Raw na tela do GitHub e com o botão direito do mouse selecione os dados, salvando-os como arquivo .csv no diretório de trabalho recém criado. Esta base de dados é a mesma apresentada no Capítulo 1.\nNo R studio crie um novo Script em: File --> New File --> RScript. Antes de qualquer ação, salve o novo arquivo como aula_01.R. A partir de agora, todos os comandos desta aula deverão ser digitados dentro deste arquivo. Para rodar cada comando, pressione o botão Run no RStudio ou digite as teclas de atalho Ctrl + Enter. Não se esqueça de salvar o arquivo texto à medida que adiciona novos comandos.\nPara verificar se o R está lendo corretamente os arquivos recém criados em seu diretório, digite o comando dir() no console do RStudio:\n\n\ndir()\n\n\n\n[1] \"aula_01.R\" \n [2] \"Intro_estatistica.Rproj\" \n [3] \"Reservatorios_Parana_parcial.csv\"\n\n\nSe tudo estiver correto, o resultado deste comando deve listar os arquivos presentes em sua pasta de trabalho recém criada: aula_01.R, Intro_estatistica.Rproj e Reservatorios_Parana_parcial.csv."
  },
  {
    "objectID": "qmd/01_estrutura_dados/02-procdados.html#instalação-de-pacotes",
    "href": "qmd/01_estrutura_dados/02-procdados.html#instalação-de-pacotes",
    "title": "2  Processamento de dados",
    "section": "2.2 Instalação de pacotes",
    "text": "2.2 Instalação de pacotes\nO R possui vários pacotes (ou bibliotecas) pré-instalados, porém é comum que tenhamos que utilizar alguns que não venham na instalação padrão. Neste projeto utilizaremos o pacote tidyverse. Para instalar o pacote, digite o seguinte comando no Console do RStudio:\n\ninstall.packages(\"tidyverse\")\n\nPara mais detalhes sobre o pacote, acesse a apostila do R e veja o site oficial.\nUm pacote necessita ser instalado somente uma vez em seu computador. Feito isto ele estará sempre disponível, bastando carregá-lo a cada vez que você abrir uma seção do R."
  },
  {
    "objectID": "qmd/01_estrutura_dados/02-procdados.html#carregando-os-pacotes",
    "href": "qmd/01_estrutura_dados/02-procdados.html#carregando-os-pacotes",
    "title": "2  Processamento de dados",
    "section": "2.3 Carregando os pacotes",
    "text": "2.3 Carregando os pacotes\nAntes de iniciar as análises, insira este comando em seu arquivo texto:\n\nlibrary(tidyverse)\n\nAo rodar este comando você habilita as funções do pacote para serem utilizados em sua seção do R. Sempre que você iniciar uma nova seção do R você deverá carregar os pacotes necessários com o comando library()."
  },
  {
    "objectID": "qmd/01_estrutura_dados/02-procdados.html#importanto-a-base-de-dados",
    "href": "qmd/01_estrutura_dados/02-procdados.html#importanto-a-base-de-dados",
    "title": "2  Processamento de dados",
    "section": "2.4 Importanto a base de dados",
    "text": "2.4 Importanto a base de dados\nA base de dados está disponível em nosso diretório, porém ainda não a importamos para o ambiente R. Para isto, utilize o comando read_delim():\n\n\n\n\nres = read_delim('Reservatorios_Parana_parcial.csv',\n                  delim = ',',\n                  locale = locale(decimal_mark = '.',\n                                  encoding = 'latin1'))\n\nO comando acima importa para o R os dados da tabela denominada Reservatorios_Parana_parcial.csv e cria um objeto denominado res contendo as informações dos arquivo. A partir de agora, qualquer modificação que fizermos no objeto res, não irá alterar o arquivo .csv original.\nVamos entender alguns argumentos do comando read_delim():\n\ndelim = ',': utilizado para dizer ao R que cada coluna na base de dados está separada das demais por uma vírgula. Se no arquivo .csv as colunas estivessem separadas por ponto-e-vígula, deveríamos escrever delim = ';'.\ndecimal_mark = '.': informa que o símbolo ponto é utilizado como um separador decimal. Se no arquivo .csv os números decimais utilizassem a vírgula, o argumento deveria ser decimal_mark = ','.\nencoding = 'latin1': indica a forma de codificação. A necessidade deste argumento depende do sistema operacional de seu computador. Outras formas de codificação além de são UTF-8, ISO-8859-1,além de outras. Geralmente, o argumento é necessário quando existem caracteres especiais na base de dados como acentos e cedilhas. Como recomendação, é interessante evitar o uso destes tipos de caracteres sempre que possível.\n\nPodemos visualizar a base de dados no RStudio digitando:\n\nres\n\n# A tibble: 31 × 11\n   Reservato…¹ Bacia Fecha…²   Area Trofia    pH Condu…³ Alcal…⁴ P.total Riqueza\n   <chr>       <chr>   <dbl>  <dbl> <chr>  <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 Cavernoso   Igua…    1965   2.9  Oligo…   7.4    33.1   140.      7.8      18\n 2 Curucaca    Igua…    1982   2    Oligo…   7      32.4   126.      4.7      16\n 3 Foz do Are… Igua…    1980 139    Oligo…   7.3    35.5    97      14.3      19\n 4 Irai        Igua…    2000  15    Eutró…   6.9    50.2     3.3    53.4      12\n 5 JMF         Igua…    1970   0.45 Mesot…   7.3    40.2     3.7    41.2      18\n 6 Jordao      Igua…    1996   3.4  Oligo…   7.1    23.7   153.      3.3      17\n 7 Passauna    Igua…    1978  14    Oligo…   8.8   126.    526      15.2      11\n 8 Piraquara   Igua…    1979   3.3  Oligo…   7.1    22.8    50.7     4.5       8\n 9 Salto Caxi… Igua…    1998 124    Oligo…   7.3    39.6   106      12.1      21\n10 Salto do V… Igua…    1959   2.9  Oligo…   6.5    23.2   279      11         8\n# … with 21 more rows, 1 more variable: CPUE <dbl>, and abbreviated variable\n#   names ¹​Reservatorio, ²​Fechamento, ³​Condutividade, ⁴​Alcalinidade\n\n\nFazendo isso você verá somente parte da base de dados no console, a depender do tamanho de sua janela do RStudio. Caso queira ver a tabela completa em uma aba separada do RStudio digite:\n\nView(res)"
  },
  {
    "objectID": "qmd/01_estrutura_dados/02-procdados.html#verificando-a-estrutura-da-base-de-dados",
    "href": "qmd/01_estrutura_dados/02-procdados.html#verificando-a-estrutura-da-base-de-dados",
    "title": "2  Processamento de dados",
    "section": "2.5 Verificando a estrutura da base de dados",
    "text": "2.5 Verificando a estrutura da base de dados\nA base de dados é simplesmente uma tabela, em que cada linha representa uma observação e cada coluna uma variável a semelhança do que discutímos no Capítulo 1. Vamos realizar algumas operações para entender como explorar as informações contidas na tabela.\nO comando abaixo informa alguns detalhes sobre cada coluna da tabela e dos tipos de dados:\n\nglimpse(res)\n\nRows: 31\nColumns: 11\n$ Reservatorio  <chr> \"Cavernoso\", \"Curucaca\", \"Foz do Areia\", \"Irai\", \"JMF\", …\n$ Bacia         <chr> \"Iguacu\", \"Iguacu\", \"Iguacu\", \"Iguacu\", \"Iguacu\", \"Iguac…\n$ Fechamento    <dbl> 1965, 1982, 1980, 2000, 1970, 1996, 1978, 1979, 1998, 19…\n$ Area          <dbl> 2.90, 2.00, 139.00, 15.00, 0.45, 3.40, 14.00, 3.30, 124.…\n$ Trofia        <chr> \"Oligotrófico\", \"Oligotrófico\", \"Oligotrófico\", \"Eutrófi…\n$ pH            <dbl> 7.4, 7.0, 7.3, 6.9, 7.3, 7.1, 8.8, 7.1, 7.3, 6.5, 8.6, 9…\n$ Condutividade <dbl> 33.1, 32.4, 35.5, 50.2, 40.2, 23.7, 125.6, 22.8, 39.6, 2…\n$ Alcalinidade  <dbl> 139.80, 125.70, 97.00, 3.30, 3.70, 152.70, 526.00, 50.67…\n$ P.total       <dbl> 7.8, 4.7, 14.3, 53.4, 41.2, 3.3, 15.2, 4.5, 12.1, 11.0, …\n$ Riqueza       <dbl> 18, 16, 19, 12, 18, 17, 11, 8, 21, 8, 24, 21, 22, 15, 10…\n$ CPUE          <dbl> 9.22, 28.73, 11.59, 30.76, 5.95, 7.75, 7.51, 4.01, 20.83…\n\n\nExistem dois tipos de dados: chr identificando que a coluna contém uma variável qualitativa e dbl, identificando que a coluna contém uma variável quantitativa."
  },
  {
    "objectID": "qmd/01_estrutura_dados/02-procdados.html#reordenando-as-linhas-da-base-de-dados",
    "href": "qmd/01_estrutura_dados/02-procdados.html#reordenando-as-linhas-da-base-de-dados",
    "title": "2  Processamento de dados",
    "section": "2.6 Reordenando as linhas da base de dados",
    "text": "2.6 Reordenando as linhas da base de dados\nA tabela contém uma coluna denominada Fechamento, que mostra o ano em que o reservatório foi formado. Vamos visualizar em ordem crescente do ano de formação, do mais antigo para o mais novo:\n\nres %>% \n  arrange(Fechamento)\n\n# A tibble: 31 × 11\n   Reservatorio Bacia Fecha…¹  Area Trofia    pH Condu…² Alcal…³ P.total Riqueza\n   <chr>        <chr>   <dbl> <dbl> <chr>  <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 Alagados     Tiba…    1909  7.2  Oligo…   7.6    41.7   172.     19.9       7\n 2 Vossoroca    Lito…    1949  5.1  Mesot…   7.3    39.8   156      21.9      14\n 3 Guaricana    Lito…    1957  7    Oligo…   7.4    27.9    83.7    12.4      12\n 4 Salto Grande Para…    1958 12    Oligo…   7.1    62.3   230.     10.3      24\n 5 Apucaraninha Tiba…    1958 NA    <NA>    NA      NA      NA      NA        10\n 6 Salto do Vau Igua…    1959  2.9  Oligo…   6.5    23.2   279      11         8\n 7 Melissa      Piri…    1962  0.1  Eutró…   6.8    34      68.4    66.9      12\n 8 Mourao       Ivai     1964 11.3  Oligo…   8.1    23.3    56.6     7.1      15\n 9 Cavernoso    Igua…    1965  2.9  Oligo…   7.4    33.1   140.      7.8      18\n10 JMF          Igua…    1970  0.45 Mesot…   7.3    40.2     3.7    41.2      18\n# … with 21 more rows, 1 more variable: CPUE <dbl>, and abbreviated variable\n#   names ¹​Fechamento, ²​Condutividade, ³​Alcalinidade\n\n\nO reservatório mais antigo é de 1909 e o mais novo de 2000. Três reservatórios estão ao final da tabela pois não há informações sobre o ano de Fechamento e suas céluas constam como NA.\n\n\n\n\n\n\nNota\n\n\n\nAo rodar esta função não alteramos o objeto res, apenas o visualizamos em uma ordem diferente. Digite novamente o nome do objeto e verá que a ordem permanece inalterada.\n\nres\n\n\n\nSe desejarmos visualizar a tabela em ordem decresente, basta fazermos:\n\nres %>% \n  arrange(desc(Fechamento))\n\nSe utilizarmos as função arrange() com uma variável nominal, a tabela será organizada em ordem alfabética para esta variável.\n\nres %>% \n  arrange(Bacia)"
  },
  {
    "objectID": "qmd/01_estrutura_dados/02-procdados.html#selecionando-colunas-da-tabela",
    "href": "qmd/01_estrutura_dados/02-procdados.html#selecionando-colunas-da-tabela",
    "title": "2  Processamento de dados",
    "section": "2.7 Selecionando colunas da tabela",
    "text": "2.7 Selecionando colunas da tabela\nÉ interessante, sobretudo para grandes bases de dados, se pudermos selecionar sub-grupos de colunas, excluindo outras que não nos interessam. Podemos fazer isto facilmente utilizando a função select().\nPor exemplo, para selecionar somente as colunas Reservatório, Area e Riqueza:\n\nres_new = res %>% \n  select(Reservatorio, Area, Riqueza)\n\nres_new %>% \n  flextable() %>%\n  fit_to_width(max_width = 8)\n\n\n\nReservatorioAreaRiquezaCavernoso2.9018Curucaca2.0016Foz do Areia139.0019Irai15.0012JMF0.4518Jordao3.4017Passauna14.0011Piraquara3.308Salto Caxias124.0021Salto do Vau2.908Salto Osorio51.0024Salto Santiago208.0021Segredo82.5022Mourao11.3015Patos1.3010Guaricana7.0012Parigot Souza12.0012Salto do Meio0.1011Vossoroca5.1014Canoas I30.8535Canoas II22.5040Capivara419.3034Chavantes400.0023Rosana220.0030Salto Grande12.0024Taquarucu80.1033Melissa0.1012Santa Maria0.077Alagados7.207Apucaraninha10Harmonia7\n\n\nO que fizemos nos comandos acima foi cirar um novo objeto (res_new), contendo somente as colunas selecionadas.\nSe quisermos selecionar todas as variáveis exceto Reservatório fazemos:\n\nrew_new = res %>% \n  select(-Reservatorio)\n\nrew_new %>% \n  flextable() %>%\n  fit_to_width(max_width = 8)\n\n\n\nBaciaFechamentoAreaTrofiapHCondutividadeAlcalinidadeP.totalRiquezaCPUEIguacu1,9652.90Oligotrófico7.433.1139.807.8189.22Iguacu1,9822.00Oligotrófico7.032.4125.704.71628.73Iguacu1,980139.00Oligotrófico7.335.597.0014.31911.59Iguacu2,00015.00Eutrófico6.950.23.3053.41230.76Iguacu1,9700.45Mesotrófico7.340.23.7041.2185.95Iguacu1,9963.40Oligotrófico7.123.7152.703.3177.75Iguacu1,97814.00Oligotrófico8.8125.6526.0015.2117.51Iguacu1,9793.30Oligotrófico7.122.850.674.584.01Iguacu1,998124.00Oligotrófico7.339.6106.0012.12120.83Iguacu1,9592.90Oligotrófico6.523.2279.0011.082.43Iguacu1,97551.00Oligotrófico8.638.9233.303.42412.55Iguacu1,979208.00Oligotrófico9.239.5117.6013.12111.73Iguacu1,99282.50Oligotrófico7.034.5165.206.42213.72Ivai1,96411.30Oligotrófico8.123.356.557.11516.50Ivai1.30Mesotrófico6.946.0180.1039.2104.71Litoranea1,9577.00Oligotrófico7.427.983.7212.4127.95Litoranea1,97012.00Oligotrófico7.763.6259.2016.91213.12Litoranea0.10Oligotrófico6.937.4147.1017.11116.10Litoranea1,9495.10Mesotrófico7.339.8156.0021.91411.74Paranapanema1,99930.85Oligotrófico7.463.3234.909.93517.95Paranapanema1,99222.50Oligotrófico7.861.29.04013.86Paranapanema1,975419.30Oligotrófico7.558.6196.005.53413.04Paranapanema1,970400.00Oligotrófico7.657.8211.807.8237.35Paranapanema1,986220.007.758.2202.403020.92Paranapanema1,95812.00Oligotrófico7.162.3230.1010.32413.67Paranapanema1,98980.10Oligotrófico7.957.0191.804.53321.82Piriqui1,9620.10Eutrófico6.834.068.3766.9126.29Piriqui0.07Oligotrófico6.841.7480.1014.979.40Tibagi1,9097.20Oligotrófico7.641.7172.2019.975.60Tibagi1,958102.05TibagiOligotrófico8.331.0113.308.6724.88\n\n\nPodemos fazer também uma seleção que vá desde uma coluna inicial até uma coluna final. Podemos selecionar, por exemplo, todas as colunas desde pH até P.total. Para isto fazemos:\n\nres_new = res %>% \n  select(pH:P.total)\n\nres_new %>% \n  flextable() %>%\n  fit_to_width(max_width = 8)\n\n\n\npHCondutividadeAlcalinidadeP.total7.433.1139.807.87.032.4125.704.77.335.597.0014.36.950.23.3053.47.340.23.7041.27.123.7152.703.38.8125.6526.0015.27.122.850.674.57.339.6106.0012.16.523.2279.0011.08.638.9233.303.49.239.5117.6013.17.034.5165.206.48.123.356.557.16.946.0180.1039.27.427.983.7212.47.763.6259.2016.96.937.4147.1017.17.339.8156.0021.97.463.3234.909.97.861.29.07.558.6196.005.57.657.8211.807.87.758.2202.407.162.3230.1010.37.957.0191.804.56.834.068.3766.96.841.7480.1014.97.641.7172.2019.98.331.0113.308.6\n\n\nPodemos ainda selecionar todas as variáveis categóricas:\n\nrew_new = res %>% \n  select_if(is.character)\n\nrew_new %>% \n  flextable() %>%\n  fit_to_width(max_width = 8)\n\n\n\nReservatorioBaciaTrofiaCavernosoIguacuOligotróficoCurucacaIguacuOligotróficoFoz do AreiaIguacuOligotróficoIraiIguacuEutróficoJMFIguacuMesotróficoJordaoIguacuOligotróficoPassaunaIguacuOligotróficoPiraquaraIguacuOligotróficoSalto CaxiasIguacuOligotróficoSalto do VauIguacuOligotróficoSalto OsorioIguacuOligotróficoSalto SantiagoIguacuOligotróficoSegredoIguacuOligotróficoMouraoIvaiOligotróficoPatosIvaiMesotróficoGuaricanaLitoraneaOligotróficoParigot SouzaLitoraneaOligotróficoSalto do MeioLitoraneaOligotróficoVossorocaLitoraneaMesotróficoCanoas IParanapanemaOligotróficoCanoas IIParanapanemaOligotróficoCapivaraParanapanemaOligotróficoChavantesParanapanemaOligotróficoRosanaParanapanemaSalto GrandeParanapanemaOligotróficoTaquarucuParanapanemaOligotróficoMelissaPiriquiEutróficoSanta MariaPiriquiOligotróficoAlagadosTibagiOligotróficoApucaraninhaTibagiHarmoniaTibagiOligotrófico\n\n\nOu todas as variáveis numéricas:\n\nrew_new = res %>% \n  select_if(is.numeric)\n\nrew_new %>% \n  flextable() %>%\n  fit_to_width(max_width = 8)\n\n\n\nFechamentoAreapHCondutividadeAlcalinidadeP.totalRiquezaCPUE1,9652.907.433.1139.807.8189.221,9822.007.032.4125.704.71628.731,980139.007.335.597.0014.31911.592,00015.006.950.23.3053.41230.761,9700.457.340.23.7041.2185.951,9963.407.123.7152.703.3177.751,97814.008.8125.6526.0015.2117.511,9793.307.122.850.674.584.011,998124.007.339.6106.0012.12120.831,9592.906.523.2279.0011.082.431,97551.008.638.9233.303.42412.551,979208.009.239.5117.6013.12111.731,99282.507.034.5165.206.42213.721,96411.308.123.356.557.11516.501.306.946.0180.1039.2104.711,9577.007.427.983.7212.4127.951,97012.007.763.6259.2016.91213.120.106.937.4147.1017.11116.101,9495.107.339.8156.0021.91411.741,99930.857.463.3234.909.93517.951,99222.507.861.29.04013.861,975419.307.558.6196.005.53413.041,970400.007.657.8211.807.8237.351,986220.007.758.2202.403020.921,95812.007.162.3230.1010.32413.671,98980.107.957.0191.804.53321.821,9620.106.834.068.3766.9126.290.076.841.7480.1014.979.401,9097.207.641.7172.2019.975.601,958102.058.331.0113.308.6724.88\n\n\nFinalmente, podemos alterar a ordem das colunas conforme desejarmos:\n\nnova_ordem = c('Fechamento', 'Area', \n                'Bacia', 'Reservatorio', 'CPUE', \n                'Riqueza', 'Trofia', 'Condutividade', \n                'pH', 'P.total', 'Alcalinidade')\nres_new = res %>% \n  select(nova_ordem)\n\nres_new %>% \n  flextable() %>%\n  fit_to_width(max_width = 8)\n\n\n\nFechamentoAreaBaciaReservatorioCPUERiquezaTrofiaCondutividadepHP.totalAlcalinidade1,9652.90IguacuCavernoso9.2218Oligotrófico33.17.47.8139.801,9822.00IguacuCurucaca28.7316Oligotrófico32.47.04.7125.701,980139.00IguacuFoz do Areia11.5919Oligotrófico35.57.314.397.002,00015.00IguacuIrai30.7612Eutrófico50.26.953.43.301,9700.45IguacuJMF5.9518Mesotrófico40.27.341.23.701,9963.40IguacuJordao7.7517Oligotrófico23.77.13.3152.701,97814.00IguacuPassauna7.5111Oligotrófico125.68.815.2526.001,9793.30IguacuPiraquara4.018Oligotrófico22.87.14.550.671,998124.00IguacuSalto Caxias20.8321Oligotrófico39.67.312.1106.001,9592.90IguacuSalto do Vau2.438Oligotrófico23.26.511.0279.001,97551.00IguacuSalto Osorio12.5524Oligotrófico38.98.63.4233.301,979208.00IguacuSalto Santiago11.7321Oligotrófico39.59.213.1117.601,99282.50IguacuSegredo13.7222Oligotrófico34.57.06.4165.201,96411.30IvaiMourao16.5015Oligotrófico23.38.17.156.551.30IvaiPatos4.7110Mesotrófico46.06.939.2180.101,9577.00LitoraneaGuaricana7.9512Oligotrófico27.97.412.483.721,97012.00LitoraneaParigot Souza13.1212Oligotrófico63.67.716.9259.200.10LitoraneaSalto do Meio16.1011Oligotrófico37.46.917.1147.101,9495.10LitoraneaVossoroca11.7414Mesotrófico39.87.321.9156.001,99930.85ParanapanemaCanoas I17.9535Oligotrófico63.37.49.9234.901,99222.50ParanapanemaCanoas II13.8640Oligotrófico61.27.89.01,975419.30ParanapanemaCapivara13.0434Oligotrófico58.67.55.5196.001,970400.00ParanapanemaChavantes7.3523Oligotrófico57.87.67.8211.801,986220.00ParanapanemaRosana20.923058.27.7202.401,95812.00ParanapanemaSalto Grande13.6724Oligotrófico62.37.110.3230.101,98980.10ParanapanemaTaquarucu21.8233Oligotrófico57.07.94.5191.801,9620.10PiriquiMelissa6.2912Eutrófico34.06.866.968.370.07PiriquiSanta Maria9.407Oligotrófico41.76.814.9480.101,9097.20TibagiAlagados5.607Oligotrófico41.77.619.9172.201,958TibagiApucaraninha2.0510TibagiHarmonia24.887Oligotrófico31.08.38.6113.30"
  },
  {
    "objectID": "qmd/01_estrutura_dados/02-procdados.html#filtrando-linhas-na-tabela",
    "href": "qmd/01_estrutura_dados/02-procdados.html#filtrando-linhas-na-tabela",
    "title": "2  Processamento de dados",
    "section": "2.8 Filtrando linhas na tabela",
    "text": "2.8 Filtrando linhas na tabela\nPodemos fazer algo similar com as linhas utilizando a função filter(). P Por exemplo, se quisermos selecionar somente os reservatórios da bacia do rio Paranapanema podemos fazer:\n\nres_paranapanema = res %>% \n  filter(Bacia == 'Paranapanema')\n\nres_paranapanema %>% \n  flextable() %>%\n  fit_to_width(max_width = 8)\n\n\n\nReservatorioBaciaFechamentoAreaTrofiapHCondutividadeAlcalinidadeP.totalRiquezaCPUECanoas IParanapanema1,99930.85Oligotrófico7.463.3234.99.93517.95Canoas IIParanapanema1,99222.50Oligotrófico7.861.29.04013.86CapivaraParanapanema1,975419.30Oligotrófico7.558.6196.05.53413.04ChavantesParanapanema1,970400.00Oligotrófico7.657.8211.87.8237.35RosanaParanapanema1,986220.007.758.2202.43020.92Salto GrandeParanapanema1,95812.00Oligotrófico7.162.3230.110.32413.67TaquarucuParanapanema1,98980.10Oligotrófico7.957.0191.84.53321.82\n\n\nOu todos os reservatório exceto os da bacia do rio Paranapanema.\n\nres_outros = res %>% \n  filter(Bacia != 'Paranapanema')\n\nres_outros %>% \n  flextable() %>%\n  fit_to_width(max_width = 8)\n\n\n\nReservatorioBaciaFechamentoAreaTrofiapHCondutividadeAlcalinidadeP.totalRiquezaCPUECavernosoIguacu1,9652.90Oligotrófico7.433.1139.807.8189.22CurucacaIguacu1,9822.00Oligotrófico7.032.4125.704.71628.73Foz do AreiaIguacu1,980139.00Oligotrófico7.335.597.0014.31911.59IraiIguacu2,00015.00Eutrófico6.950.23.3053.41230.76JMFIguacu1,9700.45Mesotrófico7.340.23.7041.2185.95JordaoIguacu1,9963.40Oligotrófico7.123.7152.703.3177.75PassaunaIguacu1,97814.00Oligotrófico8.8125.6526.0015.2117.51PiraquaraIguacu1,9793.30Oligotrófico7.122.850.674.584.01Salto CaxiasIguacu1,998124.00Oligotrófico7.339.6106.0012.12120.83Salto do VauIguacu1,9592.90Oligotrófico6.523.2279.0011.082.43Salto OsorioIguacu1,97551.00Oligotrófico8.638.9233.303.42412.55Salto SantiagoIguacu1,979208.00Oligotrófico9.239.5117.6013.12111.73SegredoIguacu1,99282.50Oligotrófico7.034.5165.206.42213.72MouraoIvai1,96411.30Oligotrófico8.123.356.557.11516.50PatosIvai1.30Mesotrófico6.946.0180.1039.2104.71GuaricanaLitoranea1,9577.00Oligotrófico7.427.983.7212.4127.95Parigot SouzaLitoranea1,97012.00Oligotrófico7.763.6259.2016.91213.12Salto do MeioLitoranea0.10Oligotrófico6.937.4147.1017.11116.10VossorocaLitoranea1,9495.10Mesotrófico7.339.8156.0021.91411.74MelissaPiriqui1,9620.10Eutrófico6.834.068.3766.9126.29Santa MariaPiriqui0.07Oligotrófico6.841.7480.1014.979.40AlagadosTibagi1,9097.20Oligotrófico7.641.7172.2019.975.60ApucaraninhaTibagi1,958102.05HarmoniaTibagiOligotrófico8.331.0113.308.6724.88\n\n\n\n\n\n\n\n\nOperadores lógicos\n\n\n\nA função filter() utiliza operadores lógicos (retornam VERDADEIRO ou FALSO). Para aprender sobre este operadores no R veja Operadores lógicos\n\n\nPodemos realizar operações análogas para variáveis numéricas. Vamos selecionar somente os reservatórios com pH menor que \\(7.0\\).\n\nres_acidos = res %>% \n  filter(pH < 7)\n\nres_acidos %>% \n  flextable() %>%\n  fit_to_width(max_width = 8)\n\n\n\nReservatorioBaciaFechamentoAreaTrofiapHCondutividadeAlcalinidadeP.totalRiquezaCPUEIraiIguacu2,00015.00Eutrófico6.950.23.3053.41230.76Salto do VauIguacu1,9592.90Oligotrófico6.523.2279.0011.082.43PatosIvai1.30Mesotrófico6.946.0180.1039.2104.71Salto do MeioLitoranea0.10Oligotrófico6.937.4147.1017.11116.10MelissaPiriqui1,9620.10Eutrófico6.834.068.3766.9126.29Santa MariaPiriqui0.07Oligotrófico6.841.7480.1014.979.40\n\n\nSe quisermos pH’s menores ou iguais a \\(7.0\\) fazemos:\n\nres_acidos = res %>% \n  filter(pH <= 7)\n\nres_acidos %>% \n  flextable() %>%\n  fit_to_width(max_width = 8)\n\n\n\nReservatorioBaciaFechamentoAreaTrofiapHCondutividadeAlcalinidadeP.totalRiquezaCPUECurucacaIguacu1,9822.00Oligotrófico7.032.4125.704.71628.73IraiIguacu2,00015.00Eutrófico6.950.23.3053.41230.76Salto do VauIguacu1,9592.90Oligotrófico6.523.2279.0011.082.43SegredoIguacu1,99282.50Oligotrófico7.034.5165.206.42213.72PatosIvai1.30Mesotrófico6.946.0180.1039.2104.71Salto do MeioLitoranea0.10Oligotrófico6.937.4147.1017.11116.10MelissaPiriqui1,9620.10Eutrófico6.834.068.3766.9126.29Santa MariaPiriqui0.07Oligotrófico6.841.7480.1014.979.40"
  },
  {
    "objectID": "qmd/01_estrutura_dados/02-procdados.html#adicionando-ou-modificando-colunas",
    "href": "qmd/01_estrutura_dados/02-procdados.html#adicionando-ou-modificando-colunas",
    "title": "2  Processamento de dados",
    "section": "2.9 Adicionando ou modificando colunas",
    "text": "2.9 Adicionando ou modificando colunas\nPodemos adicionar novas colunas, assim como fazemos em uma planilha excel. Temos por exemplo, o ano de formação do reservatório. Assumindo que estes dados são do ano de \\(2005\\), podemos criar uma coluna indicando a idade do reservatório no momento da tomada de dados. Para criar uma nova coluna usamos a função mutate().\n\nres_new = res %>% \n  mutate(Idade = 2005 - Fechamento)\n\nres %>% \n  flextable() %>%\n  fit_to_width(max_width = 8)\n\n\n\nReservatorioBaciaFechamentoAreaTrofiapHCondutividadeAlcalinidadeP.totalRiquezaCPUECavernosoIguacu1,9652.90Oligotrófico7.433.1139.807.8189.22CurucacaIguacu1,9822.00Oligotrófico7.032.4125.704.71628.73Foz do AreiaIguacu1,980139.00Oligotrófico7.335.597.0014.31911.59IraiIguacu2,00015.00Eutrófico6.950.23.3053.41230.76JMFIguacu1,9700.45Mesotrófico7.340.23.7041.2185.95JordaoIguacu1,9963.40Oligotrófico7.123.7152.703.3177.75PassaunaIguacu1,97814.00Oligotrófico8.8125.6526.0015.2117.51PiraquaraIguacu1,9793.30Oligotrófico7.122.850.674.584.01Salto CaxiasIguacu1,998124.00Oligotrófico7.339.6106.0012.12120.83Salto do VauIguacu1,9592.90Oligotrófico6.523.2279.0011.082.43Salto OsorioIguacu1,97551.00Oligotrófico8.638.9233.303.42412.55Salto SantiagoIguacu1,979208.00Oligotrófico9.239.5117.6013.12111.73SegredoIguacu1,99282.50Oligotrófico7.034.5165.206.42213.72MouraoIvai1,96411.30Oligotrófico8.123.356.557.11516.50PatosIvai1.30Mesotrófico6.946.0180.1039.2104.71GuaricanaLitoranea1,9577.00Oligotrófico7.427.983.7212.4127.95Parigot SouzaLitoranea1,97012.00Oligotrófico7.763.6259.2016.91213.12Salto do MeioLitoranea0.10Oligotrófico6.937.4147.1017.11116.10VossorocaLitoranea1,9495.10Mesotrófico7.339.8156.0021.91411.74Canoas IParanapanema1,99930.85Oligotrófico7.463.3234.909.93517.95Canoas IIParanapanema1,99222.50Oligotrófico7.861.29.04013.86CapivaraParanapanema1,975419.30Oligotrófico7.558.6196.005.53413.04ChavantesParanapanema1,970400.00Oligotrófico7.657.8211.807.8237.35RosanaParanapanema1,986220.007.758.2202.403020.92Salto GrandeParanapanema1,95812.00Oligotrófico7.162.3230.1010.32413.67TaquarucuParanapanema1,98980.10Oligotrófico7.957.0191.804.53321.82MelissaPiriqui1,9620.10Eutrófico6.834.068.3766.9126.29Santa MariaPiriqui0.07Oligotrófico6.841.7480.1014.979.40AlagadosTibagi1,9097.20Oligotrófico7.641.7172.2019.975.60ApucaraninhaTibagi1,958102.05HarmoniaTibagiOligotrófico8.331.0113.308.6724.88\n\n\nNote que re-escrevemos o objeto res adicionando uma nova coluna denominada Idade calculada a partir da expressão Idade = 2005 - Fechamento. A partir de agora portanto, o objeto res tem uma coluna adicional.\n\nLembre-se entretanto que esta alteração foi feita dentro do ambiente do projeto. A base de dados original .csv permanece inalterada.\n\nPodemos também fazer alterações em uma coluna existente usando a mesma função mutate. Por exemplo, a variável Area é dada em \\(km^2\\). Podemos transformá-la em Hectares multiplicando os valores por \\(100\\).\n\nres = res %>% \n  mutate(Area = Area * 100)\n\nres %>% \n  flextable() %>%\n  fit_to_width(max_width = 8)\n\n\n\nReservatorioBaciaFechamentoAreaTrofiapHCondutividadeAlcalinidadeP.totalRiquezaCPUECavernosoIguacu1,965290Oligotrófico7.433.1139.807.8189.22CurucacaIguacu1,982200Oligotrófico7.032.4125.704.71628.73Foz do AreiaIguacu1,98013,900Oligotrófico7.335.597.0014.31911.59IraiIguacu2,0001,500Eutrófico6.950.23.3053.41230.76JMFIguacu1,97045Mesotrófico7.340.23.7041.2185.95JordaoIguacu1,996340Oligotrófico7.123.7152.703.3177.75PassaunaIguacu1,9781,400Oligotrófico8.8125.6526.0015.2117.51PiraquaraIguacu1,979330Oligotrófico7.122.850.674.584.01Salto CaxiasIguacu1,99812,400Oligotrófico7.339.6106.0012.12120.83Salto do VauIguacu1,959290Oligotrófico6.523.2279.0011.082.43Salto OsorioIguacu1,9755,100Oligotrófico8.638.9233.303.42412.55Salto SantiagoIguacu1,97920,800Oligotrófico9.239.5117.6013.12111.73SegredoIguacu1,9928,250Oligotrófico7.034.5165.206.42213.72MouraoIvai1,9641,130Oligotrófico8.123.356.557.11516.50PatosIvai130Mesotrófico6.946.0180.1039.2104.71GuaricanaLitoranea1,957700Oligotrófico7.427.983.7212.4127.95Parigot SouzaLitoranea1,9701,200Oligotrófico7.763.6259.2016.91213.12Salto do MeioLitoranea10Oligotrófico6.937.4147.1017.11116.10VossorocaLitoranea1,949510Mesotrófico7.339.8156.0021.91411.74Canoas IParanapanema1,9993,085Oligotrófico7.463.3234.909.93517.95Canoas IIParanapanema1,9922,250Oligotrófico7.861.29.04013.86CapivaraParanapanema1,97541,930Oligotrófico7.558.6196.005.53413.04ChavantesParanapanema1,97040,000Oligotrófico7.657.8211.807.8237.35RosanaParanapanema1,98622,0007.758.2202.403020.92Salto GrandeParanapanema1,9581,200Oligotrófico7.162.3230.1010.32413.67TaquarucuParanapanema1,9898,010Oligotrófico7.957.0191.804.53321.82MelissaPiriqui1,96210Eutrófico6.834.068.3766.9126.29Santa MariaPiriqui7Oligotrófico6.841.7480.1014.979.40AlagadosTibagi1,909720Oligotrófico7.641.7172.2019.975.60ApucaraninhaTibagi1,958102.05HarmoniaTibagiOligotrófico8.331.0113.308.6724.88"
  },
  {
    "objectID": "qmd/01_estrutura_dados/02-procdados.html#renomeando-colunas",
    "href": "qmd/01_estrutura_dados/02-procdados.html#renomeando-colunas",
    "title": "2  Processamento de dados",
    "section": "2.10 Renomeando colunas",
    "text": "2.10 Renomeando colunas\nFinalmente, podemos renomear colunas para facilitar a leitura dos dados. A coluna P.total, por exemplo, indica a quantidade de fósforo total, enquanto a variável CPUE é a captura em kg. Podemos renomear estas colunas usando a função rename:\n\nres = res %>% \n  rename(Fosforo_total = P.total,\n         Captura_kg = CPUE)\n\nres %>% \n  flextable() %>%\n  fit_to_width(max_width = 8)\n\n\n\nReservatorioBaciaFechamentoAreaTrofiapHCondutividadeAlcalinidadeFosforo_totalRiquezaCaptura_kgCavernosoIguacu1,965290Oligotrófico7.433.1139.807.8189.22CurucacaIguacu1,982200Oligotrófico7.032.4125.704.71628.73Foz do AreiaIguacu1,98013,900Oligotrófico7.335.597.0014.31911.59IraiIguacu2,0001,500Eutrófico6.950.23.3053.41230.76JMFIguacu1,97045Mesotrófico7.340.23.7041.2185.95JordaoIguacu1,996340Oligotrófico7.123.7152.703.3177.75PassaunaIguacu1,9781,400Oligotrófico8.8125.6526.0015.2117.51PiraquaraIguacu1,979330Oligotrófico7.122.850.674.584.01Salto CaxiasIguacu1,99812,400Oligotrófico7.339.6106.0012.12120.83Salto do VauIguacu1,959290Oligotrófico6.523.2279.0011.082.43Salto OsorioIguacu1,9755,100Oligotrófico8.638.9233.303.42412.55Salto SantiagoIguacu1,97920,800Oligotrófico9.239.5117.6013.12111.73SegredoIguacu1,9928,250Oligotrófico7.034.5165.206.42213.72MouraoIvai1,9641,130Oligotrófico8.123.356.557.11516.50PatosIvai130Mesotrófico6.946.0180.1039.2104.71GuaricanaLitoranea1,957700Oligotrófico7.427.983.7212.4127.95Parigot SouzaLitoranea1,9701,200Oligotrófico7.763.6259.2016.91213.12Salto do MeioLitoranea10Oligotrófico6.937.4147.1017.11116.10VossorocaLitoranea1,949510Mesotrófico7.339.8156.0021.91411.74Canoas IParanapanema1,9993,085Oligotrófico7.463.3234.909.93517.95Canoas IIParanapanema1,9922,250Oligotrófico7.861.29.04013.86CapivaraParanapanema1,97541,930Oligotrófico7.558.6196.005.53413.04ChavantesParanapanema1,97040,000Oligotrófico7.657.8211.807.8237.35RosanaParanapanema1,98622,0007.758.2202.403020.92Salto GrandeParanapanema1,9581,200Oligotrófico7.162.3230.1010.32413.67TaquarucuParanapanema1,9898,010Oligotrófico7.957.0191.804.53321.82MelissaPiriqui1,96210Eutrófico6.834.068.3766.9126.29Santa MariaPiriqui7Oligotrófico6.841.7480.1014.979.40AlagadosTibagi1,909720Oligotrófico7.641.7172.2019.975.60ApucaraninhaTibagi1,958102.05HarmoniaTibagiOligotrófico8.331.0113.308.6724.88"
  },
  {
    "objectID": "qmd/01_estrutura_dados/02-procdados.html#outras-operações-para-processamento-e-transformação-de-dados",
    "href": "qmd/01_estrutura_dados/02-procdados.html#outras-operações-para-processamento-e-transformação-de-dados",
    "title": "2  Processamento de dados",
    "section": "2.11 Outras operações para processamento e transformação de dados",
    "text": "2.11 Outras operações para processamento e transformação de dados\nExistem muitas outras operações possíveis para processar conjuntos de dados. O conjunto de pacotes tidyverse (veja aqui) possui um grande número de funções para esta finalidade que operam de modo coerente.\nNeste capítulo vimos funções para:\n\nImportar arquivos .csv: read_delim;\nVerificar os tipos de dados de uma tabela: glimpse;\nReorganizar informações: arrange;\nSelecionar colunas: select;\nFiltrar linhas: filter;\nAdicionar/modificar colunas: mutate;\nRenomear colunas: rename.\n\nA partir dos próximos capítulos iremos nos dedicar a aspectos da estatística descritiva, apresentando novas funções à medida que forem necessárias. Caso deseje explorar outras funções para processamento e transformação de dados acesse o capítulo Manipulação e formatação de dados."
  },
  {
    "objectID": "qmd/02_dados_univariados/01-varqualit.html",
    "href": "qmd/02_dados_univariados/01-varqualit.html",
    "title": "3  Descrevendo variáveis qualitativas",
    "section": "",
    "text": "Pacotes e funções utilizadas no capítulo\n\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(flextable)\nVariáveis qualitativas podem ser categóricas não-ordenadas ou categóricas ordenadas. A descrição de variáveis desta natureza se dá por meio da contagem e da representação dos níveis destas variáveis por meio da contagem total, pelos valores relativos ou percentuais.\nImporte a base de dados Reservatorios_Parana_parcial.csv.\nNa tabela, temos 3 variáveis categóricas: Reservatorio, Bacia e Trofia. A primeira identifica cada reservatório pelo seu nome. A segunda é uma variável categórica não-ordenada (nível de mensuração nominal) e a terceira uma variável categórica ordenada (nível de mensuração ordinal)."
  },
  {
    "objectID": "qmd/02_dados_univariados/01-varqualit.html#representação-em-tabelas-de-frequência",
    "href": "qmd/02_dados_univariados/01-varqualit.html#representação-em-tabelas-de-frequência",
    "title": "3  Descrevendo variáveis qualitativas",
    "section": "3.1 Representação em tabelas de frequência",
    "text": "3.1 Representação em tabelas de frequência\nComo discutimos no capítulo Capítulo 1, se uma variável é descrita no nível de mensuração nominal, como é o caso de Bacia, podemos obter a frequência com que cada um dos níveis aparece na variável. Essa contagem pode ser obtda por meio de uma tabela de frequências.\n\nfbacia = res %>% \n  group_by(Bacia) %>% \n  summarise(Frequencia = n())\n\nfbacia %>% \n  flextable()\n\n\n\nBaciaFrequenciaIguacu13Ivai2Litoranea4Paranapanema7Piriqui2Tibagi3\n\n\nO resultado mostra que existem 13 reservatórios na tabela pertancentes à bacia do rio Iguacu, 2 à bacia do rio Ivai e assim por diante. Confira estas contagens na base de dados.\nAs linhas da tabela estão organizadas em ordem alfabética. Para facilitar a visualização, podemos ordená-las de modo decrescente como função do número de reservatórios por bacia.\n\nfbacia = fbacia %>% \n  arrange(desc(Frequencia))\n\nfbacia %>% \n  flextable()\n\n\n\nBaciaFrequenciaIguacu13Paranapanema7Litoranea4Tibagi3Ivai2Piriqui2\n\n\nPodemos olhar também para a frequência relativa do número de reservatórios por bacia.\n\nfbacia_rel = fbacia %>% \n  mutate(Freq_relativa = Frequencia / sum(Frequencia))\n\nfbacia_rel %>% \n  flextable()\n\n\n\nBaciaFrequenciaFreq_relativaIguacu130.41935484Paranapanema70.22580645Litoranea40.12903226Tibagi30.09677419Ivai20.06451613Piriqui20.06451613\n\n\nA característica da frequência relativa, é que o somatório da coluna deve ser igual a \\(1\\), enquanto a frequência numérica tem o somatório igual ao número de linhas na tabela.\n\nfbacia_rel %>% \n  summarise_if(is.numeric, sum) %>% \n  flextable()\n\n\n\nFrequenciaFreq_relativa311"
  },
  {
    "objectID": "qmd/02_dados_univariados/01-varqualit.html#tabelas-de-frequência-para-variáveis-categóricas-ordenadas",
    "href": "qmd/02_dados_univariados/01-varqualit.html#tabelas-de-frequência-para-variáveis-categóricas-ordenadas",
    "title": "3  Descrevendo variáveis qualitativas",
    "section": "3.2 Tabelas de frequência para variáveis categóricas ordenadas",
    "text": "3.2 Tabelas de frequência para variáveis categóricas ordenadas\nA característica da variável Trofia difere da anterior unicamente por ser uma variável categórica ordenada que no caso, expressa o grau de eutrofização dos reservatórios. Neste sentido, a única mudança na representação da variável se deve ao fato de que existe uma sequência natural para representar os níveis. Podemos indicar que uma determinada variável é categórica ordenada fazendo uma pequena alteração na base de dados.\nSe montarmos uma tabela de frequência da variável trofia, teremos as linhas organizadas em ordem alfabética:\n\nftrofia = res %>% \n  group_by(Trofia) %>% \n  summarise(Frequencia = n())\n\nftrofia %>% \n  flextable()\n\n\n\nTrofiaFrequenciaEutrófico2Mesotrófico3Oligotrófico242\n\n\nSe desejarmos que as colunas apareçam como função do nível de eutrofização, devemos primeiro transformar a variável bacia em um fator ordenado que é o modo como o R interpreta uma variável categórica ordenada.\nInicialmente, use o comando abaixo para verificar que o R entende a variável Trofia como um character (<chr>).\n\nglimpse(res)\n\nRows: 31\nColumns: 11\n$ Reservatorio  <chr> \"Cavernoso\", \"Curucaca\", \"Foz do Areia\", \"Irai\", \"JMF\", …\n$ Bacia         <chr> \"Iguacu\", \"Iguacu\", \"Iguacu\", \"Iguacu\", \"Iguacu\", \"Iguac…\n$ Fechamento    <dbl> 1965, 1982, 1980, 2000, 1970, 1996, 1978, 1979, 1998, 19…\n$ Area          <dbl> 2.90, 2.00, 139.00, 15.00, 0.45, 3.40, 14.00, 3.30, 124.…\n$ Trofia        <chr> \"Oligotrófico\", \"Oligotrófico\", \"Oligotrófico\", \"Eutrófi…\n$ pH            <dbl> 7.4, 7.0, 7.3, 6.9, 7.3, 7.1, 8.8, 7.1, 7.3, 6.5, 8.6, 9…\n$ Condutividade <dbl> 33.1, 32.4, 35.5, 50.2, 40.2, 23.7, 125.6, 22.8, 39.6, 2…\n$ Alcalinidade  <dbl> 139.80, 125.70, 97.00, 3.30, 3.70, 152.70, 526.00, 50.67…\n$ P.total       <dbl> 7.8, 4.7, 14.3, 53.4, 41.2, 3.3, 15.2, 4.5, 12.1, 11.0, …\n$ Riqueza       <dbl> 18, 16, 19, 12, 18, 17, 11, 8, 21, 8, 24, 21, 22, 15, 10…\n$ CPUE          <dbl> 9.22, 28.73, 11.59, 30.76, 5.95, 7.75, 7.51, 4.01, 20.83…\n\n\nIremos transformar esta variável para que o R a interprete como uma variável categórica ordenada.\n\nres = res %>% \n  mutate(Trofia = factor(Trofia, ordered = TRUE, \n                         levels = c('Oligotrófico', \n                                    'Mesotrófico', \n                                    'Eutrófico')))\n\nApós aplicarmos este comando, vemos que agora o R reconhece esta variável como do tipo <ord>:\n\nglimpse(res)\n\nRows: 31\nColumns: 11\n$ Reservatorio  <chr> \"Cavernoso\", \"Curucaca\", \"Foz do Areia\", \"Irai\", \"JMF\", …\n$ Bacia         <chr> \"Iguacu\", \"Iguacu\", \"Iguacu\", \"Iguacu\", \"Iguacu\", \"Iguac…\n$ Fechamento    <dbl> 1965, 1982, 1980, 2000, 1970, 1996, 1978, 1979, 1998, 19…\n$ Area          <dbl> 2.90, 2.00, 139.00, 15.00, 0.45, 3.40, 14.00, 3.30, 124.…\n$ Trofia        <ord> Oligotrófico, Oligotrófico, Oligotrófico, Eutrófico, Mes…\n$ pH            <dbl> 7.4, 7.0, 7.3, 6.9, 7.3, 7.1, 8.8, 7.1, 7.3, 6.5, 8.6, 9…\n$ Condutividade <dbl> 33.1, 32.4, 35.5, 50.2, 40.2, 23.7, 125.6, 22.8, 39.6, 2…\n$ Alcalinidade  <dbl> 139.80, 125.70, 97.00, 3.30, 3.70, 152.70, 526.00, 50.67…\n$ P.total       <dbl> 7.8, 4.7, 14.3, 53.4, 41.2, 3.3, 15.2, 4.5, 12.1, 11.0, …\n$ Riqueza       <dbl> 18, 16, 19, 12, 18, 17, 11, 8, 21, 8, 24, 21, 22, 15, 10…\n$ CPUE          <dbl> 9.22, 28.73, 11.59, 30.76, 5.95, 7.75, 7.51, 4.01, 20.83…\n\n\nE se fizermos:\n\nres$Trofia\n\n [1] Oligotrófico Oligotrófico Oligotrófico Eutrófico    Mesotrófico \n [6] Oligotrófico Oligotrófico Oligotrófico Oligotrófico Oligotrófico\n[11] Oligotrófico Oligotrófico Oligotrófico Oligotrófico Mesotrófico \n[16] Oligotrófico Oligotrófico Oligotrófico Mesotrófico  Oligotrófico\n[21] Oligotrófico Oligotrófico Oligotrófico <NA>         Oligotrófico\n[26] Oligotrófico Eutrófico    Oligotrófico Oligotrófico <NA>        \n[31] Oligotrófico\nLevels: Oligotrófico < Mesotrófico < Eutrófico\n\n\nTemos agora a indicação de que há uma ordenação sequêncial nos níveis de trofia em queOligotrófico < Mesotrófico < Eutrófico.\nA partir de agora, se extrairmos uma tabela de frequência relativa, as linhas serão apresentadas na ordem pré-definida.\n\nftrofia = res %>% \n  group_by(Trofia) %>% \n  summarise(Frequencia = n())\n\nftrofia %>% \n  flextable()\n\n\n\nTrofiaFrequenciaOligotrófico24Mesotrófico3Eutrófico22\n\n\nNa tabela acima a última linha aparece vazia, pois há casos sem informação, isto é, com dados faltantes que são representados por NA. Caso você não queira representar os dados faltantes, é possível utilizar a função drop_na() para excluir estas linhas.\n\nftrofia = res %>% \n  drop_na(Trofia) %>% \n  group_by(Trofia) %>% \n  summarise(Frequencia = n())\n\nftrofia %>% \n  flextable()\n\n\n\nTrofiaFrequenciaOligotrófico24Mesotrófico3Eutrófico2\n\n\nPodemos adicionar uma coluna de frequência relativa como fizemos anteriormente.\n\nftrofia_rel = ftrofia %>% \n  mutate(Freq_relativa = Frequencia / sum(Frequencia))\n\nftrofia_rel %>% \n  flextable()\n\n\n\nTrofiaFrequenciaFreq_relativaOligotrófico240.82758621Mesotrófico30.10344828Eutrófico20.06896552"
  },
  {
    "objectID": "qmd/02_dados_univariados/01-varqualit.html#representação-gráfica",
    "href": "qmd/02_dados_univariados/01-varqualit.html#representação-gráfica",
    "title": "3  Descrevendo variáveis qualitativas",
    "section": "3.3 Representação gráfica",
    "text": "3.3 Representação gráfica\nVariáveis categóricas não-ordenadas ou ordenadas podem ser representadas por gráficos de barras.\n\n\n\n\n\n\nO pacote ggplot2\n\n\n\nUtilizaremos o pacote ggplot2 para representar graficamente as variáveis. O ggplot2 é instalado e habilitado juntamente com o tidyverse, de modo que neste momento você já o tem habilitado em sua seção do R.\nPara uma rápida explicação do ggplot2 veja aqui. Para uma explicação detalhada veja o site oficial (ggplot2){target=“_blank”} e o livro ggplot2: Elegant Graphics for Data Analysis.\n\n\n\n3.3.1 Criando um gráfico no ggplot2\nUm gráfico no ggplot2 é feito em camadas que devem ter minimamente:\n\nA definição da tabela de dados;\nA estética gráfica indicando quais serão representadas e suas posições no gráfico;\nO formato da representação por meoipr de geometrias gráficas (ex. gráficos de pontos, linhas, barras, etc.).\n\nEsta abordagem permite que tenhamos um método consistente para construir diferentes tipos gráficos.\nGráfico de frequência\nUm gráfico de barras da variável Bacia ficaria:\n\nggplot(data = res) + # define tabela de dados.\n  aes(x = Bacia) +   # define a estética gráfica\n  geom_bar()         # define a geometria gráfica\n\n\n\n\nVamos entender o comando:\n\nggplot(res): define a tabela de dados que será utilizada.\naes(x = Bacia): define que o eixo \\(x\\) deste gráfico deverá contém os níveis da variável Bacia.\ngeom_bar(): define o tipo gráfico, que no ggplot2 é denominado de geometria gráfica\n\nEstes argumentos devem ser inseridos sequencialmente separados pelo símbolo +.\nO argumento geom_bar() espera como argumento uma variável qualitativa em um dos eixos. Por padrão, a função fará a contagem dos níveis dentro da variável e apresentará a representará em \\(y\\).\nPoderíamos ter feito o mesmo gráfico de barras indicando que a variável Bacia seria representada no eixo \\(y\\) o que resultaria em um gráfico de barras invertido conforme abaixo:\n\nggplot(data = res) +\n  aes(y = Bacia) +\n  geom_bar()\n\n\n\n\nA estética gráfica (aes()) não precisa estar em uma linha separada. Também não é obrigatório escrevermos data = res. De fato, é mais comum escrevermos esta sequência de argumentos como:\n\nggplot(res, mapping = aes(x = Bacia)) +\n  geom_bar()\n\n\n\n\nou simplesmente:\n\nggplot(res, aes(x = Bacia)) +\n  geom_bar()\n\n\n\n\no que irá gerar os mesmos resultados.\nFinalmente, poderíamos organizar os barras em ordem decrescente como fizemos com as tabelas de frequência, utilizando a função fct_infreq():\n\nggplot(res, aes(x = fct_infreq(Bacia))) +\n  geom_bar()\n\n\n\n\nou em ordem crescente, revertendo o comando anterior com a função fct_rev().\n\nggplot(res, aes(x = fct_rev(fct_infreq(Bacia)))) +\n  geom_bar()\n\n\n\n\nFormatanto a figura\nPara tornar a figura mais auto-explicativa, podemos adicionar camadas identificando os eixos e fornecendo, título, subtítulo e outras informações:\n\nggplot(res, aes(x = Bacia)) +\n  geom_bar() +\n  labs(title = 'Reservatórios do Estado do Paraná',\n       subtitle = 'Reservatórios por bacia hidrográfica',\n       caption = 'Dados obtidos do livro: Biocenoses em Reservatórios',\n       x = 'Bacia hidrográfica',\n       y = 'Frequência')\n\n\n\n\nGráfico de frequência relativa\nUtilizando o ggplot2 é simples construir um gráfico de frequência relativa.\n\nggplot(res, aes(x = Bacia, y = ..prop.., group = 1)) +\n  geom_bar()\n\n\n\n\nVeja que para isto transformou as contagens em proporções. Se quisermos transformar em percentuais então:\n\nggplot(res, aes(x = Bacia, y = ..prop.., group = 1)) +\n  geom_bar() +\n  scale_y_continuous(labels = scales::percent)\n\n\n\n\n\nOutras opções para construir um gráfico de barras\nAs figuras que acabamos de fazer apresentam, do modo gráfico, as mesmas informações das tabelas de frequência vistas no início do capítulo sem que fosse necessário contruir a tabela de frequência, pois o comando geom_bar() já realiza esta contagem.\nEntretanto, caso já tivéssemos a tabela de frequência também poderíamos utilizá-la diretamente. No início do capítulo, contruímos a tabela fbacia_rel onde tínhamos 3 colunas: Bacia, Frequencia, Freq_relativa.\nPodemos construir gráficos de barras das tabelas Frequencia ou Freq_relativa da seguinte forma:\n\nggplot(fbacia_rel, aes(x = Bacia, y = Frequencia)) +\n  geom_bar(stat = 'identity')\n\n\n\n\ne\n\nggplot(fbacia_rel, aes(x = Bacia, y = Freq_relativa)) +\n  geom_bar(stat = 'identity')\n\n\n\n\nPara utilizar diretamente uma tabela de frequências, devemos oferecer a variável do eixo \\(x\\), do eixo \\(y\\) e no comando geom_bar(), adicionar o argumento stat = 'identity'. Feito isso, o comando utiliza diretamente os números disponíveis em cada linha da coluna Frequencia.\n\nGráfico de frequência para variáveis categóricas ordenadas\nPara variáveis categóricas ordenadas valem os mesmos comandos apresentados acima. Usamos a função geom_bar() para construir os gráficos de barras. A diferença é que antes da construção, é necessário que a variável em questão tenha sido transformada para um fator ordenado.\nLembrando o que fizemos no início do capítulo, esta transformação pode ser feita para a variável Trofia com os comandos:\n\nres = res %>% \n  mutate(Trofia = factor(Trofia, ordered = TRUE, \n                         levels = c('Oligotrófico', \n                                    'Mesotrófico', \n                                    'Eutrófico')))\n\nFeito isto, o comando geom_bar() vai organizar os níveis de acordo com a sequência definida:\n\nggplot(res, aes(x = Trofia)) +\n  geom_bar()\n\n\n\n\nE caso seja necessário retirar reservatórios com dados faltantes em Trofia, podemos fazer:\n\nres %>% \n  drop_na(Trofia) %>% \nggplot(aes(x = Trofia)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\nPré-processamento do data-frame para o ggplot2\n\n\n\nNo comando acima, a tabela de dados não foi inserida dentro do comando ggplot(). Ela foi inicialmente processada para remoção de NAs com a função drop_na() e o operador %>% foi utilizado para inserir o resultado do processamento no ggplot(). Esta é outra maneira de combinar capacidade de processamento de dados no R, conforme apresentado no Capítulo 2, com a representação gráfica."
  },
  {
    "objectID": "qmd/02_dados_univariados/02-varquant.html",
    "href": "qmd/02_dados_univariados/02-varquant.html",
    "title": "4  Descrevendo variáveis quantitativas",
    "section": "",
    "text": "Pacotes e funções utilizadas no capítulo\n\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(flextable)\nVariáveis quantitativas podem ser discretas ou contínuas. A descrição dos padrões de distribuição para esses tipos de variáveis é feita utilizando tabelas (frequência e frequência acumulada) e gráficos (histogramas ou gráficos de frequência acumulada)."
  },
  {
    "objectID": "qmd/02_dados_univariados/02-varquant.html#tabelas-de-frequência-para-variáveis-quantitativas",
    "href": "qmd/02_dados_univariados/02-varquant.html#tabelas-de-frequência-para-variáveis-quantitativas",
    "title": "4  Descrevendo variáveis quantitativas",
    "section": "4.1 Tabelas de frequência para variáveis quantitativas",
    "text": "4.1 Tabelas de frequência para variáveis quantitativas\nA construção de tabelas de frequências para variáveis quantitativas necessita que agrupemos as observações em faixas de valores. Veja as observações abaixo por exemplo:\n\n\n\n\\(X =\\) {2.66, 3.72, 5.73, 9.08, 2.02, 8.98, 9.45, 6.61, 6.29, 0.62}\nPodemos agrupá-las nas seguintes faixas de valores:\n(0,2], (2,4], (4,6], (6,8], (8,10]\nEstas faixas de valores são denominadas de intervalos de classe. Se alocadas nestes intervalos, as observações ficam:\n\nX = c(2.66, 3.72, 5.73, 9.08, 2.02, 8.98, 9.45, 6.61, 6.29, 0.62)\nClasses = cut(X, seq(0, 10, by = 2))\n\ndf = data.frame(X, Classes)\n\ndf %>% \n  flextable()\n\n\n\nXClasses2.66(2,4]3.72(2,4]5.73(4,6]9.08(8,10]2.02(2,4]8.98(8,10]9.45(8,10]6.61(6,8]6.29(6,8]0.62(0,2]\n\n\nUma tabela de frequência para estas observações é construínda contando o número de observações por intervalo de classes. Neste caso:\n\ndf %>% \n  group_by(Classes) %>% \n  summarise(Frequencia = n()) %>% \n  flextable()\n\n\n\nClassesFrequencia(0,2]1(2,4]3(4,6]1(6,8]2(8,10]3\n\n\nNa coluna Frequencia temos o número de observações da variável X para cada um dos intervalos de classe.\n\n4.1.1 Alterando o tamanho dos intervalos de classe\nNo exemplo anterior definimos os limites dos intervalos de classe de 2 em 2 unidades. Poderíamos ter escolhido outros tamanhos, por exemplo, de 4 em 4. Neste caso teríamos:\n\nClasses = cut(X, seq(0, 12, by = 4))\ndata.frame(X, Classes) %>% \n  group_by(Classes) %>% \n  summarise(Frequencia = n()) %>% \n  flextable()\n\n\n\nClassesFrequencia(0,4]4(4,8]3(8,12]3\n\n\nNote que ao escolhermos o tamanho dos intervalos de classe, estamos criando a variável qualitativa ordinal Classes, a partir do agrupamento das observações em X. Neste sentido, não há um único tamanho correto para os intervalos de classe. O objetivo é encontrar um tamanho que permita evidenciar os padrões de distribuição da variável sem perdermos muitos detalhes.\nPoderíamos escolher um tamanho muito grande, de 5 em 5. Neste caso teríamos somente 2 grupos.\n\nClasses = cut(X, seq(0, 10, by = 5))\ndata.frame(X, Classes) %>% \n  group_by(Classes) %>% \n  summarise(Frequencia = n()) %>% \n  flextable()\n\n\n\nClassesFrequencia(0,5]4(5,10]6\n\n\nPor outro lado, poderíamos escolher um tamanho muito pequeno, por exemplo de 1 e 1.\n\nClasses = cut(X, seq(0, 10, by = 1))\ndata.frame(X, Classes) %>% \n  group_by(Classes) %>% \n  summarise(Frequencia = n()) %>% \n  flextable()\n\n\n\nClassesFrequencia(0,1]1(2,3]2(3,4]1(5,6]1(6,7]2(8,9]1(9,10]2\n\n\nNas duas situações, não é possível evidenciar os padrões de distribuição da variável X. Na primeira, perdemos muita informação agrupando as observações em somente duas faixas e na última, perdemos a capacidade de visualizar os padrões de distribuição de X.\n\n\n4.1.2 Tabela de frequência para a CPUE\nImporte a base de dados Reservatorios_Parana_parcial.csv.\n\n\n\n\nres = read_delim('Reservatorios_Parana_parcial.csv',\n                  delim = ',',\n                  locale = locale(decimal_mark = '.',\n                                  encoding = 'latin1'))\n\n\n\n\nNo objeto res temos 8 variáveis quantitativas: Fechamento, Area, pH, Condutividade, Alcalinidade, P.total, Riqueza, CPUE. Vamos verificar a como fica uma tabela de frequências para a variável CPUE que expressa a captura em \\(kg\\) de peixes em cada reservatório. Inicialmente, vamos selecionar somente esta coluna da tabela e visualizá-la em ordem crescente.\n\nres %>% \n  select(CPUE) %>% \n  arrange(CPUE) %>% \n  flextable()\n\n\n\nCPUE2.052.434.014.715.605.956.297.357.517.757.959.229.4011.5911.7311.7412.5513.0413.1213.6713.7213.8616.1016.5017.9520.8320.9221.8224.8828.7330.76\n\n\nVemos que o menor valor é 2.05 \\(kg\\) e o maior 30.76 \\(kg\\). Assumindo que temos 31 observações, vamos criar um intervalo de classes de 5 em 5 unidades. Para isto, criaremos a variável cl_cpue que será uma sequência de \\(0\\) a \\(35\\), com tamanho \\(5\\). Os valores nesta sequencia são os limites de classe\n\ncl_cpue = seq(from = 0, to = 35, by = 5)\ncl_cpue\n\n[1]  0  5 10 15 20 25 30 35\n\n\nUtilizaremos os limites de classe para gerar uma nova coluna, delimitando os intervalos a que cada observação pertence. para isto utilizaremos a função cut.\n\ntab_cpue = res %>% \n  select(CPUE) %>% \n  mutate(int_cpue = cut(CPUE, breaks = cl_cpue))\n\nE veremos a tabela em ordem crescente de classes para facilitar a dentificação de padrões.\n\ntab_cpue %>% \n  arrange(CPUE) %>% \n  flextable()\n\n\n\nCPUEint_cpue2.05(0,5]2.43(0,5]4.01(0,5]4.71(0,5]5.60(5,10]5.95(5,10]6.29(5,10]7.35(5,10]7.51(5,10]7.75(5,10]7.95(5,10]9.22(5,10]9.40(5,10]11.59(10,15]11.73(10,15]11.74(10,15]12.55(10,15]13.04(10,15]13.12(10,15]13.67(10,15]13.72(10,15]13.86(10,15]16.10(15,20]16.50(15,20]17.95(15,20]20.83(20,25]20.92(20,25]21.82(20,25]24.88(20,25]28.73(25,30]30.76(30,35]\n\n\nA nova tabela tab_cpue tem agora duas colunas, os valores numéricos de CPUE e os valores transformados em intervalos de classe, int_cpue. É com esta última que montaremos a tabela de frequência.\n\nfre_cpue = tab_cpue %>% \n  group_by(int_cpue) %>% \n  summarise(Frequencia = n())\n\nfre_cpue %>% \n  flextable()\n\n\n\nint_cpueFrequencia(0,5]4(5,10]9(10,15]9(15,20]3(20,25]4(25,30]1(30,35]1\n\n\ne, em seguida de frequência relativa:\n\nfre_cpue = fre_cpue %>% \n  mutate(Freq_relativa = Frequencia / sum(Frequencia))\n\nfre_cpue %>% \n  flextable()\n\n\n\nint_cpueFrequenciaFreq_relativa(0,5]40.12903226(5,10]90.29032258(10,15]90.29032258(15,20]30.09677419(20,25]40.12903226(25,30]10.03225806(30,35]10.03225806\n\n\nVeja que os intervalos de (5,10] e (10,15] contém o maior número de observações, cerca de 29% cada um, e que acima de \\(25\\) \\(kg\\) temos somente duas observações.\n\n\n4.1.3 Tabela de frequência acumulada\nOutra forma de representar o padrão de distribuição para uma variável quantitativa é apresentá-la em uma tabela de frequência acumulada. Fazemos isso, somando de forma cumulativa as observações em cada classe de intervalo e criando duas colunas adicionais de frequência acumulada e de frequência relativa acumulada.\n\nfre_cpue = fre_cpue %>% \n  mutate(Freq_ac = cumsum(Frequencia),\n         Relativa_ac = cumsum(Freq_relativa))\n\nfre_cpue %>% \n  flextable()\n\n\n\nint_cpueFrequenciaFreq_relativaFreq_acRelativa_ac(0,5]40.1290322640.1290323(5,10]90.29032258130.4193548(10,15]90.29032258220.7096774(15,20]30.09677419250.8064516(20,25]40.12903226290.9354839(25,30]10.03225806300.9677419(30,35]10.03225806311.0000000\n\n\nVeja agora que a última linha da coluna de frequência acumulada é igual ao número de observações total e que a da frequência relativa acumulada é igual a ."
  },
  {
    "objectID": "qmd/02_dados_univariados/02-varquant.html#representação-gráfica-histogramas",
    "href": "qmd/02_dados_univariados/02-varquant.html#representação-gráfica-histogramas",
    "title": "4  Descrevendo variáveis quantitativas",
    "section": "4.2 Representação gráfica: histogramas",
    "text": "4.2 Representação gráfica: histogramas\nHistogramas são regresentações das tabelas de frequência e de frequência relativa. Um histograma da coluna CPUE pode ser feito com o comando:\n\nggplot(res, aes(x = CPUE)) +\n  geom_histogram()\n\n\n\n\nOs intervalos de classe foram escolhidos automaticamente pela função geom_histogram. Se quisermos ter o controle sobre estes intervalos, podemos adicionar o argumento beaks e a sequência com os limites de classe que criamos anteriormente:\n\nggplot(res, aes(x = CPUE)) +\n  geom_histogram(breaks = cl_cpue)\n\n\n\n\nA formatação do histograma acima pode ser melhorada de diversas formas, por exemplo:\n\nggplot(res, aes(x = CPUE, label = ..count..)) +\n  geom_histogram(breaks = cl_cpue, \n                 fill = 'darkblue', color = 'white') +\n  labs(x = 'Captura em kg', y = 'Frequência') +\n  geom_text(stat = \"bin\", size = 6, vjust = 1.5, color = 'white',\n            breaks = cl_cpue) +\n  theme_classic()\n\n\n\n\n\nModificamos a cor do preenchimento (fill = 'darkblue'), e identificamos as barras individualmente traçando uma linha branca entre elas (color = 'white');\nRe-escrevemos o rótulo dos eixos \\(x\\) e \\(y\\) (labs());\nidentificamos as frequências em cada barra individualmente com o argumento label = ..count.. e a função geom_text. Experimente alterar os argumentos dentro de geom_text para entender cada um deles.\nmodificamos o tema do gráfico para obter uma alteração geral na aparência da figura. Existem diversos outros temas possíveis que podem ser vistos aqui.\n\nUm histograma com a frequência relativa pode ser obtido com:\n\nggplot(res, aes(x = CPUE,\n                y = (..count..)/sum(..count..),\n                label = round((..count..)/sum(..count..),2))) +\n  geom_histogram(breaks = cl_cpue, \n                 fill = 'darkblue', color = 'white') +\n  labs(x = 'Captura em kg', y = 'Frequência relativa') +\n  geom_text(stat = \"bin\", size = 6, vjust = 1.5, color = 'white',\n            breaks = cl_cpue) +\n  theme_classic()\n\n\n\n\nAqui fizemos duas mudanças:\n\ninserimos o argumento y = (..count..)/sum(..count..) para dizer que as barras em \\(y\\) devem mostrar a contagem do número de observações em cada intervalo dividido pelo total.\nmodificamos o argumento label = round((..count..)/sum(..count..),2) de modo que também mostre a frequência relativa. Neste argumento, entretanto, tivemos que utilizar uma função de arredondamento round(__, 2) para dizer que os nomes abaixo das barras deveria ser mostrados somente com duas casas decimais.\nModificamos o nome do eixo \\(y\\) para y = 'Frequência relativa'.\n\n\n4.2.1 Representando frequências acumuladas\nA única modificação neste caso, será identificarmos o eixo \\(y\\) por sua contagem acumulada: y = cumsum(..count..).\n\nggplot(res, aes(x = CPUE,\n                y = cumsum(..count..),\n                label = round(cumsum(..count..),2))) +\n  geom_histogram(breaks = cl_cpue, \n                 fill = 'darkblue', color = 'white') +\n  labs(x = 'Captura em kg', y = 'Frequência acumulada') +\n  geom_text(stat = \"bin\", size = 6, vjust = 1.5, color = 'white',\n            breaks = cl_cpue) +\n  theme_classic()\n\n\n\n\nPara fazer o mesmo mostrando as frequências relativas fazemos:\n\nggplot(res, aes(x = CPUE,\n                y = cumsum(..count../sum(..count..)),\n                label = round(cumsum(..count../sum(..count..)),2))) +\n  geom_histogram(breaks = cl_cpue, \n                 fill = 'darkblue', color = 'white') +\n  labs(x = 'Captura em kg', y = 'Frequência acumulada relativa') +\n  geom_text(stat = \"bin\", size = 6, vjust = 1.5, color = 'white',\n            breaks = cl_cpue) +\n  theme_classic()"
  },
  {
    "objectID": "qmd/02_dados_univariados/03-tendcentral.html",
    "href": "qmd/02_dados_univariados/03-tendcentral.html",
    "title": "5  Medidas de tendência central",
    "section": "",
    "text": "Pacotes e funções utilizadas no capítulo\n\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(flextable)\nlibrary(patchwork)\nsource('scripts/getmode.r')\nsource('scripts/assimetria_ggplot.r')\nTabelas de frequência e histogramas (Capítulo 4) permitem a visualização dos padrões de distribuição de uma variável quantitativa, evidenciando limites inferiores e superiores, faixas de valores mais ou menos frequentes etc. Neste capítulo, veremos medidas-resumo que possibilitam descrever a tendência central de um conjunto de dados. Algumas dessas medidas são a média aritmética, a mediana, a moda e o ponto médio."
  },
  {
    "objectID": "qmd/02_dados_univariados/03-tendcentral.html#média-aritmética",
    "href": "qmd/02_dados_univariados/03-tendcentral.html#média-aritmética",
    "title": "5  Medidas de tendência central",
    "section": "5.1 Média aritmética",
    "text": "5.1 Média aritmética\nConsidere a variável \\(X\\) com \\(n\\) elementos \\(X_1\\), \\(X_2\\), \\(X_3\\), \\(\\cdots, X_n\\). A média aritmética (\\(\\overline{X}\\)) é dada por:\n\\[\\overline{X}=\\frac{X_1+X_2+X_3+\\cdots+X_n}{n}=\\frac{\\sum_{i=1}^n{X_i}}{n}\\]\nExemplo\nSeja a variável \\(X\\) abaixo:\n\n\nCode\nn = 5\nset.seed(1)\nX = sample(x = 1:10, size = n, rep = TRUE)\n\n\n\\(X =\\) {9, 4, 7, 1, 2}\n\\(X\\) possui 5 observações e tem média:\n\\(\\overline{X}=\\frac{9 + 4 + 7 + 1 + 2}{5}\\)\n\\(\\overline{X}=\\frac{23}{5} = 4.6\\)"
  },
  {
    "objectID": "qmd/02_dados_univariados/03-tendcentral.html#mediana",
    "href": "qmd/02_dados_univariados/03-tendcentral.html#mediana",
    "title": "5  Medidas de tendência central",
    "section": "5.2 Mediana",
    "text": "5.2 Mediana\nÉ definida como o valor do meio de uma distribuição, de modo que metade dos valores estão abaixo e metade está acima da mediana. Se organizarmos a variável \\(X\\) em ordem crescente teremos:\n\n\nCode\nX = sort(X)\nXmed = median(X)\n\n\n\\(X =\\) {1,2 , 4 , 7,9}\nsendo a mediana igual a \\(4\\).\nNeste exemplo, temos \\(n = 5\\) observações. Se tivermos um número par de observações, teremos duas na posição central. Por exemplo se:\n\n\nCode\nset.seed(1)\nX = sample(x = 1:10, size = 6, rep = TRUE)\n\n\n\\(X =\\) {9, 4, 7, 1, 2, 7}\nvemos que após ordenarmos \\(X\\):\n\\(X =\\) {1, 2, 4, 7, 7, 9}\nteremos o \\(4\\) e o \\(7\\) como valores do meio.\nNeste caso, a mediana fica como sendo:\n\\(\\frac{4 + 7}{2} = 5.5\\)"
  },
  {
    "objectID": "qmd/02_dados_univariados/03-tendcentral.html#moda",
    "href": "qmd/02_dados_univariados/03-tendcentral.html#moda",
    "title": "5  Medidas de tendência central",
    "section": "5.3 Moda",
    "text": "5.3 Moda\nÉ definida como o valor mais frequente de uma distribuição.\n\n\nCode\nset.seed(1)\nX = sample(x = 1:10, size = 6, rep = TRUE)\n\n\nPara \\(X =\\) {9, 4, 7, 1, 2, 7} a moda é 7, o valor que mais se repete na distribuição.\n\n\n\n\n\n\nNota\n\n\n\nA moda nem sempre é única. Se vários valores repetem-se igualmente, teremos mais de uma moda na distribuição."
  },
  {
    "objectID": "qmd/02_dados_univariados/03-tendcentral.html#ponto-médio",
    "href": "qmd/02_dados_univariados/03-tendcentral.html#ponto-médio",
    "title": "5  Medidas de tendência central",
    "section": "5.4 Ponto médio",
    "text": "5.4 Ponto médio\nÉ calculado com base nos dois valores extremos da distribuição (mínimo e máximo), sendo obtido por:\n\\[P_{medio}=\\frac{X_{minimo} + X_{maximo}}{2}\\]\nPara \\(X =\\) {9, 4, 7, 1, 2, 7} o ponto médio é:\n\\(PM = \\frac{1 + 9}{2} = \\frac{10}{2} = 5\\)"
  },
  {
    "objectID": "qmd/02_dados_univariados/03-tendcentral.html#efeito-da-assimetria-sobre-os-descritores-de-tendência-central",
    "href": "qmd/02_dados_univariados/03-tendcentral.html#efeito-da-assimetria-sobre-os-descritores-de-tendência-central",
    "title": "5  Medidas de tendência central",
    "section": "5.5 Efeito da assimetria sobre os descritores de tendência central",
    "text": "5.5 Efeito da assimetria sobre os descritores de tendência central\nCada um dos drescitores de tendência central descritos acima é mais ou menos sensível ao grau de assimetria de uma distribuiçãol. Em uma distribuição perfeitamente simétrica, onde as observações estão igualmente dispersas acima e abaixo do ponto central, os valores da média, mediana, moda e ponto médio coincidem. Por outro lado, pode ocorrer da distribuição ser assimétrica. Neste caso, a posição relativa dos descritores irá depender se a assimetria é à direita ou à esquerda. Esta discrepância ocorre devido à sensibilidade destes descritores a valores extremos na distribuição. O ponto médio é o mais sensível à presença de pontos extremos, seguido da média, mediana e a moda.\n\n\nCode\n# Ver função completa no arquivo 'scripts/assimetria_ggplot.r'\nassimetria_ggplot()\n\n\n\n\n\nFigura 5.1: Efeito da assimetria de uma distribuição sobre o ponto médio, a média aritmética, a mediana e a moda.\n\n\n\n\n\n\n\n\n\n\nMedidas de tendência central\n\n\n\nMédia aritmética: utiliza todo o conjunto de dados. Relativamente sensível a valores extremos;\nMediana: o valor do meio. Metade dos pontos está acima e metade abaixo da mediana. A mediana é uma medida resistente a valores extremos;\nModa: valor mais frequente. Se mais de um valor aparece com a mesma frequência, os dados têm uma distribuição multimodal;\nPonto médio: considera somente o valor mínimo e máximo. O ponto médio é fácil de calcular porém não utiliza a maioria do conjunto de dados e é muito sensível a valores extremos."
  },
  {
    "objectID": "qmd/02_dados_univariados/03-tendcentral.html#obtendo-medidas-de-uma-tabela-de-dados",
    "href": "qmd/02_dados_univariados/03-tendcentral.html#obtendo-medidas-de-uma-tabela-de-dados",
    "title": "5  Medidas de tendência central",
    "section": "5.6 Obtendo medidas de uma tabela de dados",
    "text": "5.6 Obtendo medidas de uma tabela de dados\nImporte a base de dados Reservatorios_Parana_parcial.csv.\n\n\n\n\nres = read_delim('Reservatorios_Parana_parcial.csv',\n                  delim = ',',\n                  locale = locale(decimal_mark = '.',\n                                  encoding = 'latin1'))\n\nMedidas-resumo podem ser obtidas com função summarise\nVamos encontrar a média aritmética e a mediana da variável CPUE.\n\nres %>% \n  summarise(CPUE_medio = mean(CPUE),\n            CPUE_mediana = median(CPUE)) %>% \n  flextable()\n\n\n\nCPUE_medioCPUE_mediana12.7009711.74\n\n\nOs valores são parecidos, porém a média é um pouco superior. Provavelmente a distribuição deve ser ligeiramente assimétrica à direita. Podemos verificar isto por meio de um histograma.\n\ncl_cpue = seq(0, 35, by = 5)\n\nggplot(res, aes(x = CPUE)) +\n  geom_histogram(breaks = cl_cpue, \n                 fill = 'darkblue',\n                 color = 'white') +\n  theme_classic()\n\n\n\n\nAlguns valores de captura próximos a \\(30\\) kg estão fazendo com que a média esteja um pouco acima da mediana.\nVamos verificar agora a média da variável Area dos reservatórios:\n\nres %>% \n  summarise(CPUE_medio = mean(Area, na.rm = TRUE),\n            CPUE_mediana = median(Area, na.rm = TRUE)) %>% \n  flextable()\n\n\n\nCPUE_medioCPUE_mediana64.736912\n\n\nPara esta variável a discrepância é muito maior.\n\n\n\n\n\n\nMedidas de tendência central\n\n\n\nobs: tivemos que utilizar o argumento na.rm = TRUE para excluir do cálculo reservatórios com dados faltantes para Area.\n\n\n\ncl_area = seq(0, 500, by = 50)\n\nggplot(res, aes(x = Area)) +\n  geom_histogram(breaks = cl_area, \n                 fill = 'darkblue',\n                 color = 'white') +\n  theme_classic()\n\n\n\n\nAo verificar o histograma, vemos que existe uma grande concentração de reservatórios com áreas até \\(50\\) \\(km^2\\), porém poucos reservatórios muito grandes com mais de \\(200\\) \\(km^2\\). Este grandes reservatórios deslocam a média aritmética à direita.\nPodemos ver quais são estes reservatórios utilizando a função filter\n\nr_grandes = res %>% \n  filter(Area >= 200) %>% \n  select(Reservatorio, Area)\n\nr_grandes %>% \n  flextable()\n\n\n\nReservatorioAreaSalto Santiago208.0Capivara419.3Chavantes400.0Rosana220.0\n\n\nEntre os 31 reservatórios temos 4 com áreas acima de \\(200\\) \\(km^2\\) (Salto Santiago, Capivara, Chavantes, Rosana). A influência destes reservatórios é maior para a média aritmética, pois esta é mais sensível a valores extremos do que para a mediana. Se calcularmos o ponto médio, veremos que esta influência é ainda maior.\n\nres %>% \n  summarise(CPUE_medio = mean(Area, na.rm = TRUE),\n            CPUE_mediana = median(Area, na.rm = TRUE),\n            P_medio = sum(range(Area, na.rm = TRUE))/2) %>% \n  flextable()\n\n\n\nCPUE_medioCPUE_medianaP_medio64.736912209.685\n\n\nSe calculamos os descritores de tendência central sem estes reservatórios, vemos que a diferença entre os descritores diminui mas não desaparece, o que ocorre devido à elevada assimetria nesta variável.\n\nres %>% \n  filter(Area < 200) %>% \n  summarise(CPUE_medio = mean(Area, na.rm = TRUE),\n            CPUE_mediana = median(Area, na.rm = TRUE),\n            P_medio = sum(range(Area, na.rm = TRUE))/2) %>% \n  flextable()\n\n\n\nCPUE_medioCPUE_medianaP_medio25.20287.269.535"
  },
  {
    "objectID": "qmd/02_dados_univariados/04-variacao.html",
    "href": "qmd/02_dados_univariados/04-variacao.html",
    "title": "6  Medidas de variação",
    "section": "",
    "text": "Pacotes e funções utilizadas no capítulo\n\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(flextable)\nAs medidas de variação indicam o grau de dispersão das observações. Distribuições com observações muito próximas à média têm baixo grau de dispersão, enquanto aquelas com observações muito distantes da média têm alto grau de dispersão. Vamos apresentar quatro índices que medem o grau de dispersão: a variância, o desvio padrão, o coeficiente de variação e a amplitude de variação."
  },
  {
    "objectID": "qmd/02_dados_univariados/04-variacao.html#variância-amostral",
    "href": "qmd/02_dados_univariados/04-variacao.html#variância-amostral",
    "title": "6  Medidas de variação",
    "section": "6.1 Variância amostral",
    "text": "6.1 Variância amostral\nA variância amostral, descrita pelo símbolo \\(s^2\\), mede quão distante as observações em uma variável estão de sua média aritmética.\nPara um conjunto de observações, \\(s^2\\) é dada por:\n\\[s^2=\\frac{\\sum_{i=1}^n{(X_i - \\overline{X})^2}}{n-1}\\]\nSeja a variável \\(X\\) abaixo.\n\n\nCode\nn = 5\nset.seed(1)\nX = sample(x = 1:10, size = n, rep = TRUE)\n\n\n\\(X =\\) {9, 4, 7, 1, 2}\n\\(X\\) tem 5 observações:\nPara calcularmos \\(s^2\\) devemos inicialmente, obter a média de \\(X\\), que neste caso é:\n\\(\\overline{X} = 4.6\\)\nE subtrair cada observação da média:\n\n\nCode\ndf = data.frame(X) %>% \n  mutate(dif = X - mean(X))\n\ndf %>% \n  knitr::kable(col.names = c('$X$', '$X - \\\\overline{X}$'))\n\n\n\n\n\n\\(X\\)\n\\(X - \\overline{X}\\)\n\n\n\n\n9\n4.4\n\n\n4\n-0.6\n\n\n7\n2.4\n\n\n1\n-3.6\n\n\n2\n-2.6\n\n\n\n\n\nEm seguida, elevamos cada a diferença ao quadrado:\n\n\nCode\ndf = df %>% \n  mutate(dif = X - mean(X)) %>% \n  mutate(dif2 = dif^2)\n\ndf %>% \n  knitr::kable(col.names = c('$X$',\n                             '$X - \\\\overline{X}$',\n                             '${(X - \\\\overline{X})}^{2}$'))\n\n\n\n\n\n\\(X\\)\n\\(X - \\overline{X}\\)\n\\({(X - \\overline{X})}^{2}\\)\n\n\n\n\n9\n4.4\n19.36\n\n\n4\n-0.6\n0.36\n\n\n7\n2.4\n5.76\n\n\n1\n-3.6\n12.96\n\n\n2\n-2.6\n6.76\n\n\n\n\n\nSe somarmos estas quantias e dividirmos por \\(n-1\\) teremos a variância amostral como:\n\\(s^2 = \\frac{19.36 + 0.36 + 5.76 + 12.96 + 6.76}{5 - 1} = \\frac{45.2}{4} = 11.3\\)"
  },
  {
    "objectID": "qmd/02_dados_univariados/04-variacao.html#desvio-padrão",
    "href": "qmd/02_dados_univariados/04-variacao.html#desvio-padrão",
    "title": "6  Medidas de variação",
    "section": "6.2 Desvio padrão",
    "text": "6.2 Desvio padrão\nO desvio padrão (\\(s\\)) é simplesmente a raiz quadrada da variância.\n\\[s=\\sqrt{\\frac{\\sum_{i=1}^n{(X_i - \\overline{X})^2}}{n-1}}\\]\nE em nosso exemplo:\n\\(s = \\sqrt{11.3} = 3.36\\)"
  },
  {
    "objectID": "qmd/02_dados_univariados/04-variacao.html#coeficiente-de-variação",
    "href": "qmd/02_dados_univariados/04-variacao.html#coeficiente-de-variação",
    "title": "6  Medidas de variação",
    "section": "6.3 Coeficiente de variação",
    "text": "6.3 Coeficiente de variação\nO coeficiente de variação (cv) relaciona o desvio padrão à média, sendo definido por:\n\\[cv = s/\\overline{X}\\] ou \\[cv_{\\%}  = s/\\overline{X}\\cdot 100\\]\nEm nosso exemplo:\n\\(cv = \\frac{3.36}{4.6} \\cdot 100 = 73.08\\)"
  },
  {
    "objectID": "qmd/02_dados_univariados/04-variacao.html#amplitude-de-variação",
    "href": "qmd/02_dados_univariados/04-variacao.html#amplitude-de-variação",
    "title": "6  Medidas de variação",
    "section": "6.4 Amplitude de variação",
    "text": "6.4 Amplitude de variação\nÉ a diferença entre os pontos máximo e mínimo de um grupo de observações\nAmplitude de variação = \\(X_{maximo} - X_{minimo}\\)\nque em nosso exemplo é\nAmplitude de variação = \\(9 - 1 = 8\\)"
  },
  {
    "objectID": "qmd/02_dados_univariados/04-variacao.html#obtendo-medidas-variação-de-uma-tabela-de-dados",
    "href": "qmd/02_dados_univariados/04-variacao.html#obtendo-medidas-variação-de-uma-tabela-de-dados",
    "title": "6  Medidas de variação",
    "section": "6.5 Obtendo medidas variação de uma tabela de dados",
    "text": "6.5 Obtendo medidas variação de uma tabela de dados\nImporte a base de dados Reservatorios_Parana_parcial.csv.\n\n\n\n\nres = read_delim('Reservatorios_Parana_parcial.csv',\n                  delim = ',',\n                  locale = locale(decimal_mark = '.',\n                                  encoding = 'latin1'))\n\nUsaremos a função summarise para obter descritores de variação para a variável CPUE.\n\nres %>% \n  summarise(CPUE_var = var(CPUE),\n            CPUE_dp = sd(CPUE),\n            CPUE_cv = sd(CPUE)/mean(CPUE) * 100,\n            CPUE_amplutide = max(CPUE) - min(CPUE)) %>% \n  flextable()\n\n\n\nCPUE_varCPUE_dpCPUE_cvCPUE_amplutide54.318387.370158.0278628.71"
  },
  {
    "objectID": "qmd/02_dados_univariados/05-quartis.html",
    "href": "qmd/02_dados_univariados/05-quartis.html",
    "title": "7  Medidas de posição: quartis",
    "section": "",
    "text": "Pacotes e funções utilizadas no capítulo\n\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(flextable)\nlibrary(patchwork)\nsource('scripts/assimetria_ggplot.r')\nA média, mediana, moda e ponto médio são um tipo de medidas de posição que indicam uma posição particular, isto é, a posição central ao redor da qual os dados estão dispersos. Existem no entanto, outras medidas de posição como quartis, medidas comumente utilizadas na descrição, análise e interpretação de dados.\nOs quartis de uma distribuição de valores são obtidos após ordenarmos os dados em ordem crescente e em seguida agrupá-los em partes iguais, contendo cada uma 25% do número total de observações. Se temos 20 observações, cada parte conterá portanto cinco observações, \\(20 \\times 0.25 = 5\\). Os quartis são as posições numéricas que dividem estas partes.\nOs quartis podem ser indicados por \\(Q_1\\), \\(Q_2\\) e \\(Q_3\\), conforme a figura abaixo.\nOs quartis que veremos aqui são medidas empíricas dos limites indicados na figura acima. Calculamos estes limites a partir de uma amostra de tamanho \\(n\\)."
  },
  {
    "objectID": "qmd/02_dados_univariados/05-quartis.html#cálculo-dos-quartis-na-posição-j",
    "href": "qmd/02_dados_univariados/05-quartis.html#cálculo-dos-quartis-na-posição-j",
    "title": "7  Medidas de posição: quartis",
    "section": "7.1 Cálculo dos quartis na posição \\(j\\)",
    "text": "7.1 Cálculo dos quartis na posição \\(j\\)\nExistem diferentes algorítmos possíveis para o cálculo dos quartis. Veremos um destes algoritmos. Para isto, siga os passos abaixo:\n\nRe-organize \\(X\\) em ordem crescente de \\(k = 1\\) a \\(k = n\\). Seja \\(n\\) o número de observações em \\(X\\), teremos portanto \\(X_k\\) como o valor observado na posição \\(k\\) em ordem crescente. Deste modo, para \\(k = 1\\) teremos \\(X_1\\) como o menor valor e para \\(k = n\\) teremos \\(X_n\\) como o maior valor.\nCalcule\n\n\\(L = \\frac{j \\times (n+1)}{4}\\);\n\nDefina \\(k\\) como o maior número inteiro abaixo de \\(L\\);\nCalcule\n\n\\(Q_j = X_k + (L - k) \\times (X_{k+1}-X_k)\\);\n\n\\(Q_j\\) será um elemento entre \\(X_k\\) e \\(X_{k+1}\\). Se \\(X_k\\) for um número inteiro, \\(Q_j = X_k\\)\n\nExemplo para o cálculo de \\(Q_1\\)\n\nset.seed(1)\nX = round(rnorm(20, 10, 2),1)\nnX = length(X)\n\nConsidere a variável \\(X\\) com \\(n =\\) 20 observações.\n\\(X\\) = 8.7, 10.4, 8.3, 13.2, 10.7, 8.4, 11, 11.5, 11.2, 9.4, 13, 10.8, 8.8, 5.6, 12.2, 9.9, 10, 11.9, 11.6, 11.2\n\nsX = sort(X)\n\nj1 = 1\nL1 = j1 * (nX + 1)/4\nk1 = floor(L1)\nQ1 = sX[k1] + (L1 - k1) * (sX[k1+1] - sX[k1])\n\nj2 = 2\nL2 = j2 * (nX + 1)/4\nk2 = floor(L2)\nQ2 = sX[k2] + (L2 - k2) * (sX[k2+1] - sX[k2])\n\nj3 = 3\nL3 = j3 * (nX + 1)/4\nk3 = floor(L3)\nQ3 = sX[k3] + (L3 - k3) * (sX[k3+1] - sX[k3])\n\n\nArrange em ordem crescente para determinar os valores de \\(X\\) nas posições \\(k\\).\n\n\nPosicao_k = paste(1:length(X), \"a Posição\", sep = \"\")\ndf = tibble(`Posicao k` = Posicao_k, `X ordenado` = sX)\n\ndf %>% \n  flextable() %>% \n  width(width = 1.5)\n\n\n\nPosicao kX ordenado1a Posição5.62a Posição8.33a Posição8.44a Posição8.75a Posição8.86a Posição9.47a Posição9.98a Posição10.09a Posição10.410a Posição10.711a Posição10.812a Posição11.013a Posição11.214a Posição11.215a Posição11.516a Posição11.617a Posição11.918a Posição12.219a Posição13.020a Posição13.2\n\n\n\nPara \\(j = 1\\) (\\(Q_1\\)) calcule:\n\n\\(L = \\frac{1 \\times (20+1)}{4} = 5.25\\);\n\nDefina \\(k\\) como o maior número inteiro abaixo de \\(L\\). Portanto, se \\(L = 5.25\\), \\(k = 5\\).\nDo item anterior, note que a observação correspondente à \\(k = 5\\) (5\\(^a\\) posição) é 8.8, enquanto a observação correspondente à \\(k = 5 + 1 = 6\\) (6\\(^a\\) posição) é 9.4. Deste modo, calcule\n\n\\(Q_1 = 8.8 + (5.25 - 5) \\times (9.4-8.8) = 8.95\\);\nVemos então que para a variável \\(X\\) em questão, o primeiro quartil é:\n\\(Q_1 = 8.95\\)\nExercício: Calcule agora os valores correspondentes a \\(Q_2\\) e \\(Q_3\\) e verifique que os resultados são: \\(Q_2 = 10.75\\) e \\(Q_3 = 11.575\\)"
  },
  {
    "objectID": "qmd/02_dados_univariados/05-quartis.html#cálculo-dos-quartis-no-r",
    "href": "qmd/02_dados_univariados/05-quartis.html#cálculo-dos-quartis-no-r",
    "title": "7  Medidas de posição: quartis",
    "section": "7.2 Cálculo dos quartis no R",
    "text": "7.2 Cálculo dos quartis no R\nPodemos programar a sequência de funções acima utilizando o R:\n\nX = c(8.7, 10.4, 8.3, 13.2, 10.7, 8.4, 11, 11.5, 11.2, 9.4, \n      13, 10.8, 8.8, 5.6, 12.2, 9.9, 10, 11.9, 11.6, 11.2)\n\n# Ordenando X em ordem crescente\nsX = sort(X, decreasing = FALSE)\n# Encontrando o número de observações em X\nn = length(X) \n# Encontrando os quartis (Q1, Q2 e Q3)\nj = c(1, 2, 3)\nL = j * (n + 1)/4\nk = floor(L)\nQ = sX[k] + (L - k) * (sX[k+1] - sX[k])\nnames(Q) = c('Q1', 'Q2', 'Q3')\n\n# Vizualizando os quartis\nQ\n\n    Q1     Q2     Q3 \n 8.950 10.750 11.575 \n\n\nNo entando, existe uma função no R denominada quantile que pode ser utilizada da seguinte forma:\n\nquantile(X, probs = c(0.25, 0.50, 0.75))\n\n   25%    50%    75% \n 9.250 10.750 11.525 \n\n\n\n\n\n\n\n\nObservações\n\n\n\n\nLembre que o quartil \\(Q_1\\) delimita a posição \\(25\\%\\), \\(Q_2\\) delimita a posição \\(50\\%\\) (\\(=\\) mediana) e \\(Q_3\\) delimita as posição \\(75\\%\\). Por este motivo utilizamos o argumento probs = c(0.25, 0.50, 0.75). Deste modo, a função quantile é mais geral que a rotina passada anteriormente, uma vez que permite o cálculo para qualquer posição entre os quantis \\(0\\%\\) e \\(100\\%\\).\nNote também que os resultados foram ligeiramente diferentes, uma vez que existem diferentes algoritmos para o cálculo dos quartis. A função quantile permite a escolha entre \\(9\\) algoritmos diferentes e por padrão, utiliza o type = 7. O passo-a-passo que mostramos nesta apostila corresponde ao type = 6. Você pode verificar que se digitar o comando abaixo, os resultados serão os mesmos que calculamos manualmente.\n\n\nquantile(X, probs = c(0.25, 0.50, 0.75), type = 6)\n\n   25%    50%    75% \n 8.950 10.750 11.575 \n\n\n\nAinda que cada algoritmo possa resultar em pequenas diferenças, estas diferenças diminuem à medida que o tamanho amostral aumenta.\nFinalmente, os quartis discutidos aqui são casos particulares de limites mais gerais denominados de quantis que indicam uma deteminama posição na distribuição. Como vimos, o limite \\(Q_1\\) por exemplo, denominado de Quartil 1 delimita o trecho que separa \\(25\\%\\). Poderíamos denominar este limite de Quantil \\(0,25\\). Pensando desta maneira, poderíamos encontrar qualquer posição. Por exemplo o quantil \\(0,10\\), que delimita os \\(10\\%\\) dos menores valores, o quantil \\(0,025\\) que delimita os \\(2,5\\%\\) menores valores na distribuição, e assim, por diante.\nÉ comum verificarmos outros limites importantes como \\(2,5\\%\\), \\(5\\%\\), \\(10\\%\\), \\(90\\%\\), \\(95\\%\\) e \\(97,5\\%\\).\nNo cálculo dos quantis para um limite \\(p\\) qualquer (\\(0 \\le p \\le 1\\)) a única mundança no algoritmno que apresentamos neste capítulo está na obtenção de \\(L\\) (passo 2), que é feita como:\n\n\\[L = p \\times (n+1)\\]"
  },
  {
    "objectID": "qmd/02_dados_univariados/05-quartis.html#obtendo-os-quartis-a-partir-de-uma-tabela-de-dados",
    "href": "qmd/02_dados_univariados/05-quartis.html#obtendo-os-quartis-a-partir-de-uma-tabela-de-dados",
    "title": "7  Medidas de posição: quartis",
    "section": "7.3 Obtendo os quartis a partir de uma tabela de dados",
    "text": "7.3 Obtendo os quartis a partir de uma tabela de dados\nImporte a base de dados Reservatorios_Parana_parcial.csv.\n\n\n\n\nres = read_delim('Reservatorios_Parana_parcial.csv',\n                  delim = ',',\n                  locale = locale(decimal_mark = '.',\n                                  encoding = 'latin1'))\n\nAssim como fizemos nos capítulos anteriores usaremos a função summarise para obter os quartis para a variável CPUE.\n\nres %>% \n  summarise(Quartis = quantile(res$CPUE, \n                               probs = c(0.25, 0.5, 0.75))) %>%\n  mutate(Limites = c('25%', '50%', '75%')) %>% \n  flextable()\n\n\n\nQuartisLimites7.4325%11.7450%16.3075%"
  },
  {
    "objectID": "qmd/02_dados_univariados/05-quartis.html#boxplots-uma-representação-gráfica-dos-quartis",
    "href": "qmd/02_dados_univariados/05-quartis.html#boxplots-uma-representação-gráfica-dos-quartis",
    "title": "7  Medidas de posição: quartis",
    "section": "7.4 Boxplots: uma representação gráfica dos quartis",
    "text": "7.4 Boxplots: uma representação gráfica dos quartis\nOs quartis de uma distribuição no ajudam a entender o formato de uma distribuição. Uma das formas amplamemte estabelecidas de representarmos graficamente os quartis são por meio de um gráfico denominado de Boxplot. Para a variável acima, o boxplot será:\n\n\nCode\ndf = data.frame(X)\nPX = quantile(X, probs = c(0, 0.25, 0.50, 0.75, 1))\nLegX = c(\"Mínimo\", \"Q1\", \"Q2 = Mediana\", \"Q3\", \"Máximo\")\nggplot(df, aes(y = X)) +\n  geom_boxplot(fill = 'lightblue', coef = 10) +\n  annotate(geom = 'text', x = .8, y = PX - 0.3,\n           label = LegX) +\n  annotate(geom = 'segment', \n           x = 0.5, xend = 1.23,\n           y = PX, yend = PX,\n           arrow = arrow(ends = 'first')) +\n  scale_y_continuous(breaks = 5:14) +\n  theme_classic() +\n  theme(axis.title = element_blank(),\n        axis.text.x = element_blank(),\n        axis.ticks.x = element_blank())\n\n\n\n\n\nFigura 7.2: Divisão em quartis de um boxplot\n\n\n\n\nEm um boxplot, a linha central representa a Mediana ou \\(2^o\\) quartil (\\(Q_2\\)) e os limites da caixa são o \\(1^o\\) e \\(3^o\\) quartis, respectivamente \\(Q_1\\) e \\(Q_3\\). As extremidades geralmente são os pontos máximo e mínimo da dsitribuição.\nExiste uma relação entre os histogramas e os boxplots. Ambos podem ser utilizados para avaliarmos o grau de assimetria de uma distribuição como apresentado abaixo. Em uma distribuição simétrica, a caixa do boxplot tende a se concentrar no meio da distribuição, enquanto em distribuições assimétricas, a caixa tende a ficar deslocada à esquerda ou à direita (Figura 7.3).\n\n\nCode\n# Ver função completa no arquivo 'scripts/assimetria_ggplot.r'\nassimetria_ggplot(fig = 'bh')\n\n\n\n\n\nFigura 7.3: Padrão de assimetria em representado por meio de histogramas e boxplots."
  },
  {
    "objectID": "qmd/02_dados_univariados/06-escorez.html",
    "href": "qmd/02_dados_univariados/06-escorez.html",
    "title": "8  Medidas de posição: índice Z",
    "section": "",
    "text": "Pacotes e funções utilizadas no capítulo\n\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(flextable)\nlibrary(patchwork)\n#source('scripts/tc_assimetria_ggplot.r')\nsource('scripts/normal_empirica_gg.r')\nO Índice (ou escore) \\(Z\\) indica a posição de uma observação particular (\\(X_i\\)) dentro de uma distribuição, relacionando a posição de \\(X_i\\) com a média e o desvio padrão da distribuição de \\(X\\). Suponha uma variável com média \\(\\overline{X}\\) e desvio padrão \\(s\\). O índice de \\(Z_i\\) para uma observação \\(i\\) particular é calculado por:\n\\[Z_i = \\frac{X_i - \\overline{X}}{s}\\]\nSeja por exemplo a variável \\(X\\)\n\\(X\\) = 8.7, 10.4, 8.3, 13.2, 10.7, 8.4, 11, 11.5, 11.2, 9.4, 13, 10.8, 8.8, 5.6, 12.2, 9.9, 10, 11.9, 11.6, 11.2\nCom média e desvio padrão \\(\\overline{X} = 10.39\\) e \\(s = 1.82\\), respectivamente.\nO índice \\(Z_i\\) para a \\(3a\\) observação \\(X_{3} = 8.3\\) por ser obtido por:\n\\(Z_8.3 = \\frac{8.3 - 10.39}{1.82} = -1.15\\)"
  },
  {
    "objectID": "qmd/02_dados_univariados/06-escorez.html#interpretando-o-valor-de-z",
    "href": "qmd/02_dados_univariados/06-escorez.html#interpretando-o-valor-de-z",
    "title": "8  Medidas de posição: índice Z",
    "section": "8.1 Interpretando o valor de \\(Z\\)",
    "text": "8.1 Interpretando o valor de \\(Z\\)\nO cálculo do índice \\(Z\\) passa pela centralização e padronização da variável \\(X\\):\n\nCentralização: a porção \\(X_i - \\overline{X}\\) mede o desvio de cada observação, isto é, a distância (positiva ou negativa) entre \\(X_i\\) e \\(\\overline{X}\\). O termo centralização se refere ao comportamento dos desvios estarem distribuídos ao redor de zero, isto é, a média dos desvios é zero.\n\n\\(\\sum_{i=1}^{n}\\frac{(X_i - \\overline{X})}{n} = 0\\)\n\nPadronização: ao dividirmos a quantia \\(X_i - \\overline{X}\\) pelo desvio padrão de \\(X\\) obtemos a nova variável denominada \\(Z\\). O termo padronização refere-se ao fato de que o desvio padrão de \\(Z\\) ser igual a \\(1\\).\n\nA transformação \\(Z\\) consiste portanto de gerar uma nova variável com média \\(\\overline{Z} = 0\\) e desvio padrão \\(s_{Z} = 1\\).\nDeste modo, o valor de \\(Z_i\\) associado a uma observação \\(X_i\\) particular nos indica quantos desvios padrões \\(X_i\\) está acima ou abaixo da média de seu grupo.\n\n\n\n\n\n\nRelação \\(Z\\) e \\(X\\)\n\n\n\n\nSe \\(Z_i = 0\\), então \\(X_i = \\overline{X}\\);\nSe \\(Z_i > 0\\), então \\(X_i > \\overline{X}\\);\nSe \\(Z_i < 0\\), então \\(X_i < \\overline{X}\\);\n\n\n\nPara uma distribuição com média igual \\(10\\) e desvio padrão igual a \\(3\\) por exemplo, uma observação \\(X_i = 16\\) terá um valor de \\(Z = \\frac{16-10}{3} = 2\\), indicando que está dois desvios padrões acima da média de \\(X\\)."
  },
  {
    "objectID": "qmd/02_dados_univariados/06-escorez.html#cálculo-de-z-no-ambiente-r",
    "href": "qmd/02_dados_univariados/06-escorez.html#cálculo-de-z-no-ambiente-r",
    "title": "8  Medidas de posição: índice Z",
    "section": "8.2 Cálculo de \\(Z\\) no ambiente R",
    "text": "8.2 Cálculo de \\(Z\\) no ambiente R\nSeja\n\n\nCode\nset.seed(1)\nX = round(rnorm(20, 10, 2),1)\n\n\n\\(X\\) = 8.7, 10.4, 8.3, 13.2, 10.7, 8.4, 11, 11.5, 11.2, 9.4, 13, 10.8, 8.8, 5.6, 12.2, 9.9, 10, 11.9, 11.6, 11.2\n\\(Z\\) pode ser obtido pelos comandos:\n\nXm = mean(X)\nXsd = sd(X)\nZ = (sort(X) - Xm)/Xsd\n\nPodemos ver na Tabela 8.1 os valores de cada observação \\(X_i\\) e dos respectivos valore de \\(Z_i\\) em ordem crescente.\n\n\nCode\nPosicao_k = paste(1:length(X), \"a Posição\", sep = \"\")\ndf = tibble(`Posicao k` = Posicao_k, `X ordenado` = sX, Z = round(Z,2)) %>% \n  add_row(., `Posicao k` = c('Média', 'Desvio padrão'),\n          `X ordenado` = c(round(mean(sX),2), round(sd(sX),2)),\n          Z = c(round(mean(Z),2), round(sd(Z),2)))\n\ndf %>%\n  flextable() %>% \n  bg(i = ~ `Posicao k` == 'Média' | `Posicao k` == 'Desvio padrão', bg = 'lightblue') %>% \n  width(width = 1.5)\n\n\n\n\nTabela 8.1:  Associação entre uma distribuição X e a transformação Z. \nPosicao kX ordenadoZ1a Posição5.60-2.632a Posição8.30-1.153a Posição8.40-1.094a Posição8.70-0.935a Posição8.80-0.876a Posição9.40-0.547a Posição9.90-0.278a Posição10.00-0.219a Posição10.400.0110a Posição10.700.1711a Posição10.800.2312a Posição11.000.3413a Posição11.200.4514a Posição11.200.4515a Posição11.500.6116a Posição11.600.6617a Posição11.900.8318a Posição12.200.9919a Posição13.001.4320a Posição13.201.54Média10.390.00Desvio padrão1.821.00\n\n\n\nPodemos comparar graficamente as distribuição das variável \\(X\\) e \\(Z\\).\n\n\nCode\nhX = ggplot(df, aes(x = `X ordenado`)) +\n  geom_histogram(fill = 'darkblue', color = 'white', bins = 9) +\n  ylab('Frequência') +\n  scale_x_continuous(n.breaks = 7) +\n  theme_classic(base_size = 20)\n\nhZ = ggplot(df, aes(x = Z)) +\n  geom_histogram(fill = 'darkblue', color = 'white', bins = 9) +\n  ylab('Frequência') +\n  scale_x_continuous(n.breaks = 7) +\n  theme_classic(base_size = 20)\n\nhX / hZ\n\n\n\n\n\nFigura 8.1: Histogramas representando a distribuição X e de Z.\n\n\n\n\nVeja na Tabela 8.1 que conforme o valor de \\(X_i\\) se distancia da média de \\(X = 10.39\\), mais distante de zero será o valor de \\(Z_i\\). Neste exemplo, as observações mais extremas de \\(X\\) estão, respectivamente, a -2.63 desvios padrões abaixo e 1.54 desvios padrões acima da média. Como discutimos acima, a nova variável \\(Z\\) tem média \\(\\overline{Z} = 0\\) (está centralizada) e desvio padrão \\(s_Z = 1\\) (está padronizada)."
  },
  {
    "objectID": "qmd/02_dados_univariados/06-escorez.html#obtendo-a-transformação-z-a-partir-de-uma-tabela-de-dados",
    "href": "qmd/02_dados_univariados/06-escorez.html#obtendo-a-transformação-z-a-partir-de-uma-tabela-de-dados",
    "title": "8  Medidas de posição: índice Z",
    "section": "8.3 Obtendo a transformação \\(Z\\) a partir de uma tabela de dados",
    "text": "8.3 Obtendo a transformação \\(Z\\) a partir de uma tabela de dados\nImporte a base de dados Reservatorios_Parana_parcial.csv.\n\n\n\n\nres = read_delim('Reservatorios_Parana_parcial.csv',\n                  delim = ',',\n                  locale = locale(decimal_mark = '.',\n                                  encoding = 'latin1'))\n\nUtilizando a função mutate, vamos manter somente a variável CPUE e criar outra coluna denominada CPUE_z.\n\ndf_z = res %>% \n  select(CPUE) %>% \n  mutate(CPUE_z = (CPUE - mean(CPUE))/sd(CPUE)) %>% \n  round(2)\n\ndf_z %>% \n  flextable()\n\n\n\nCPUECPUE_z9.22-0.4728.732.1711.59-0.1530.762.455.95-0.927.75-0.677.51-0.704.01-1.1820.831.102.43-1.3912.55-0.0211.73-0.1313.720.1416.500.524.71-1.087.95-0.6413.120.0616.100.4611.74-0.1317.950.7113.860.1613.040.057.35-0.7320.921.1213.670.1321.821.246.29-0.879.40-0.455.60-0.962.05-1.4524.881.65\n\n\nSe calcularmos a média e desvio padrão das variáveis veremos que CPUE mantém os valores originais, enquanto CPUE_z terá média igual a \\(0\\) e desvio padrão igual a \\(1\\).\n\ndf_z %>% \n  summarize(CPUE_media = mean(CPUE),\n            CPUE_dp = sd(CPUE),\n            CPUE_z_media = round(mean(CPUE_z),2),\n            CPUE_z_dp = round(sd(CPUE_z),2)) %>% \n  flextable()\n\n\n\nCPUE_mediaCPUE_dpCPUE_z_mediaCPUE_z_dp12.700977.370101"
  },
  {
    "objectID": "qmd/02_dados_univariados/06-escorez.html#valores-esperados-de-z-em-uma-distribuição-normal-padronizada",
    "href": "qmd/02_dados_univariados/06-escorez.html#valores-esperados-de-z-em-uma-distribuição-normal-padronizada",
    "title": "8  Medidas de posição: índice Z",
    "section": "8.4 Valores esperados de \\(Z\\) em uma distribuição normal padronizada",
    "text": "8.4 Valores esperados de \\(Z\\) em uma distribuição normal padronizada\nA interpretação de \\(Z\\) faz sentido quando desejamos posicionar uma determinada observação \\(X_i\\) como função da média e desvio padrão de seu grupo. Adicionalmente, se uma variável \\(X\\) puder ser descrita adequadamente por uma distribuição normal de probabilidades, existe uma regra empírica nos permite determinar os percentuais das observações acima e abaixo de limites conhecidos.\n\n\nCode\n# Ver função completa no arquivo 'scripts/normal_empirica_gg.r'\nnormal_empirica_gg()\n\n\n\n\n\nFigura 8.2: Áreas de probabilidade em uma distribuição Normal.\n\n\n\n\nNa Figura 8.2 vemos que existe uma probabilidade de aproximadamente \\(68\\%\\) de que uma observação tomada ao acaso esteja entre os limites de \\(-1\\) e \\(1\\) desvios padrões da média. Existe ainda uma probabilidade de aproximadamente \\(95\\%\\) de que uma observação esteja entre \\(-2\\) e \\(2\\) desvios padrões da média. Por outro lado, que é muito improvável encortarmso ao acaso uma observação a mais de \\(3\\) desvios padrões distantes da média. Isto deverá ocorrer em somente de cerca de \\(0,26\\%\\) dos casos em que sortearmos uma amostra aleatoriamente.\n\n\n\n\n\n\n\n\n\nUso da distribuição norma empírica\n\n\n\nSuponha que a distribuição de altura de homens adultos siga uma distribuição normal com média \\(\\mu = 175\\) cm e desvio padrão de \\(\\sigma = 175\\) cm.\n\n\nCode\nmH = 175\nsdH = 10\nlim = 2\nlinf = round(mH - lim * sdH,2)\nlsup = round(mH + lim * sdH,2)\n\n\nNeste caso, se tomarmos os limites entre \\(-2\\) e \\(+2\\) desvios padrões teremos:\n\\(\\mu - 2 \\times \\sigma = 175 - 2 \\times 10 = 155\\) cm\ne\n\\(\\mu + 2 \\times \\sigma = 175 + 2 \\times 10 = 195\\) cm\nEstes resultados sugerem que nesta população temos somente cerca de \\(5\\%\\) dos homens adultos com mais de \\(195\\) cm ou menos de \\(155\\) cm de altura."
  }
]